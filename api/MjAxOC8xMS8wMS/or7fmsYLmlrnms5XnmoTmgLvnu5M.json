{"title":"请求方法的总结","date":"2018-11-01T03:28:10.000Z","link":"2018/11/01/请求方法的总结","comments":true,"updated":"2019-08-31T10:28:53.012Z","content":"<h4 id=\"XMLHttpRequest\">XMLHttpRequest<a href=\"2018/11/01/请求方法的总结#XMLHttpRequest\"></a></h4><p>  function Timer() {      this.seconds = 0;      setInterval( () =&gt; this.seconds ++, 1000);  }     var timer = new Timer();    setTimeout( () =&gt; console.log(timer.seconds), 3100);    // 3 // 在构造函数内部的setInterval()内的回调函数，this始终指向实例化的对象，并获取实例化对象的seconds的属性,每1s这个属性的值都会增加1。否则最后在3s后执行setTimeOut()函数执行后输出的是0 </p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest(); <span class=\"comment\">//获取xhr对象</span></span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//但是XMLHttpRequest是个比较粗燥的底层对象，各个浏览器对其的创建方法也不同，以下是兼容方法：</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> xhr;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.XMLHttpRequest) &#123; </span><br><span class=\"line\">    <span class=\"comment\">// Mozilla, Safari...  </span></span><br><span class=\"line\">    xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.ActiveXObject) &#123; </span><br><span class=\"line\">    <span class=\"comment\">// IE  </span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;  </span><br><span class=\"line\">    xhr = <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">'Msxml2.XMLHTTP'</span>); </span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123; </span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;   </span><br><span class=\"line\">            xhr = <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">'Microsoft.XMLHTTP'</span>);  <span class=\"comment\">//IE5,6 </span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;&#125; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>使用XMLHttpRequest发起一个get请求</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//get请求</span></span><br><span class=\"line\">xhr.open(<span class=\"string\">\"GET\"</span>,<span class=\"string\">\"test1.txt\"</span>,<span class=\"literal\">true</span>);xhr.send();</span><br></pre></td></tr></table></div></figure>\n\n<p>完整的post请求代码</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xhr;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.XMLHttpRequest) &#123; </span><br><span class=\"line\">    <span class=\"comment\">// Mozilla, Safari...  </span></span><br><span class=\"line\">    xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.ActiveXObject) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// IE  </span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;    </span><br><span class=\"line\">        xhr = <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">'Msxml2.XMLHTTP'</span>); </span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123; </span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;  </span><br><span class=\"line\">            xhr = <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">'Microsoft.XMLHTTP'</span>);  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;&#125;<span class=\"keyword\">if</span> (xhr) &#123;</span><br><span class=\"line\">        xhr.onreadystatechange = onReadyStateChange;</span><br><span class=\"line\">        xhr.open(<span class=\"string\">'POST'</span>, <span class=\"string\">'/api'</span>, <span class=\"literal\">true</span>);  </span><br><span class=\"line\">        <span class=\"comment\">// 设置 Content-Type 为 application/x-www-form-urlencoded  </span></span><br><span class=\"line\">        <span class=\"comment\">// 以表单的形式传递数据  </span></span><br><span class=\"line\">        xhr.setRequestHeader(<span class=\"string\">'Content-Type'</span>, <span class=\"string\">'application/x-www-form-urlencoded'</span>); </span><br><span class=\"line\">        xhr.send(<span class=\"string\">'username=admin&amp;password=root'</span>);&#125;</span><br><span class=\"line\"><span class=\"comment\">// onreadystatechange 方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onReadyStateChange</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"comment\">// 该函数会被调用四次  </span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (xhr.readyState === <span class=\"number\">4</span> &amp;&amp;xhr.status === <span class=\"number\">200</span>) &#123;  </span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'执行成功'</span>);  </span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'执行出错'</span>);  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"Jquery-Ajax\">Jquery Ajax<a href=\"2018/11/01/请求方法的总结#Jquery-Ajax\"></a></h4><p>  说到Jquery，这是一个时代，几乎统治了前端10年有余，彻底解决了UI层与数据层交互的问题，直到三大框架(Angular/React/Vue）的出现，前端进入MVVM浪潮。而Ajax将XHR进行封装，让开发者可以更加便捷方便进行使用。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax(&#123;   </span><br><span class=\"line\">    <span class=\"comment\">//标准写法 </span></span><br><span class=\"line\">    type: <span class=\"string\">'POST'</span>, </span><br><span class=\"line\">    url: url,   </span><br><span class=\"line\">    data: data, </span><br><span class=\"line\">    dataType: dataType, </span><br><span class=\"line\">    success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;, </span><br><span class=\"line\">    error: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;&#125;);</span><br><span class=\"line\">$.<span class=\"keyword\">get</span>(url,function()&#123;&#125;); </span><br><span class=\"line\"><span class=\"comment\">//get请求</span></span><br><span class=\"line\">$.post(url,body,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;);</span><br><span class=\"line\"><span class=\"comment\">//post请求</span></span><br><span class=\"line\">$.getJSON(url,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;);  </span><br><span class=\"line\"><span class=\"comment\">//get请求从服务器加载Json编码</span></span><br></pre></td></tr></table></div></figure>\n\n<p>优点：  对原生XHR的封装 针对MVC的编程 完美的兼容性 支持jsonp 　</p>\n<p>缺点：  不符合MVVM 异步模型不够现代，不支持链式，代码可读性差 整个Jquery太大，引入成本过高</p>\n<h4 id=\"Fetch\">Fetch<a href=\"2018/11/01/请求方法的总结#Fetch\"></a></h4><p>  　　fetch其实是一个新世界，脱离的XHR，完全是基于Promise的异步处理机制，使用起来会比起ajax更加简单。  　　</p>\n<p>使用fetch的代码会相比xhr来说更具有条理性</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetch(url).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> response.json();&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Oops, error\"</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></div></figure>\n\n<p>　在使用ES6的箭头函数后</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetch(url).then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> response.json()) </span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> <span class=\"built_in\">console</span>.log(data))</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Oops, error\"</span>, e))</span><br></pre></td></tr></table></div></figure>\n\n<p>  　　优点：  更加底层，提供的API丰富（request, response） 语法简单，脱离了XHR，基于ES新的Promise设计 　　看到以上，或许你会觉得fetch真的很美好，但是请了解，fetch本身是一个 low-level 的 API，它注定不会像你习惯的 $.ajax 或是 axios 等库帮你封装各种各样的功能或实现。  　　</p>\n<pre><code>所以它是存在一定的缺点：  兼容性比较凄惨，低级别浏览器均不支持，需要实现fetch的polyfill了。思路其实很简单，就是判断浏览器是否支持原生的fetch，不支持的话，就仍然使用XMLHttpRequest的方式实现，同时结合Promise来进行封装。常见的polyfill就有：es6-promise,babel-polyfill,fetch-ie8等</code></pre><p>  不支持jsonp，可以引入fetch-jsonp `javascript //安装 npm install fetch-jsonp –save-dev</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用 </span></span><br><span class=\"line\">fetchJsonp(url, &#123; </span><br><span class=\"line\">    timeout: <span class=\"number\">3000</span>, </span><br><span class=\"line\">    jsonpCallback: <span class=\"string\">'callback'</span> </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(response.json());</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e) </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></div></figure>\n\n<p>  没有拦截器，需要额外再封装一层或者fetch-interceptor- 默认不带cookie，需要添加配置</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javascriptfetch(url,&#123;  </span><br><span class=\"line\">    credentials: <span class=\"string\">'include'</span> <span class=\"comment\">//include表示cookie既可同域，也可跨域，‘same-origin’表示只可同域</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></div></figure>\n\n<p>没有abort，不支持timeout超时处理</p>\n<p>  可以用Promise.race()实现，Promise.race(iterable) 方法返回一个Promise对象，只要 iterable 中任意一个Promise 被 resolve 或者 reject 后，外部的Promise 就会以相同的值被 resolve 或者 reject</p>\n<p>无法获取progress状态</p>\n<p>  fetch中的Response.body 中实现了getReader()方法用于读取原始字节流, 该字节流可以循环读取。</p>\n<p>参考：  <a href=\"https://stackoverflow.com/questions/35711724/upload-progress-indicators-for-fetch\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/35711724/upload-progress-indicators-for-fetch</a>  </p>\n<p><a href=\"https://jakearchibald.com/2016/streams-ftw/\" target=\"_blank\" rel=\"noopener\">https://jakearchibald.com/2016/streams-ftw/</a></p>\n<h4 id=\"Axios\">Axios<a href=\"2018/11/01/请求方法的总结#Axios\"></a></h4><p>  　axios也是比较新的网络请求的类库，并且被尤雨溪尤大推荐，已成为VUE的网络请求标配，也是十分的火爆。它本身也是对原生XHR的封装。 </p>\n<p> 支持node</p>\n<p>创建http请求 </p>\n<p>支持Promise API </p>\n<p>客户端防止CSRF：每个请求带一个cookie拿到的key </p>\n<p>拦截请求和响应 </p>\n<p>可取消请求</p>\n<p>  　兼容性上虽然axios本质上也是对原生XHR的封装，但是它也依赖原生ES6 Promise的实现，和fetch一样需要polyfill的兼容。</p>\n<p>安装</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//npmnpm install axios</span></span><br><span class=\"line\"><span class=\"comment\">//cdn&lt;script src=\"https://unpkg.com/axios/dist/axios.min.js\"&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></div></figure>\n\n<p>基本使用如下</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios(&#123;    </span><br><span class=\"line\">    method: <span class=\"string\">'GET'</span>,  </span><br><span class=\"line\">    url: url,&#125;)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// get请求</span></span><br><span class=\"line\">axios.get(url)  </span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">response</span>) </span>&#123;  </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(response);  </span><br><span class=\"line\">&#125;)  </span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;  </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(error);  </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// post请求</span></span><br><span class=\"line\">axios.post(‘/user’, &#123;  </span><br><span class=\"line\">    name: <span class=\"string\">'Jerry'</span>, </span><br><span class=\"line\">    lastName: <span class=\"string\">'Liang'</span> </span><br><span class=\"line\">&#125;) </span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">response</span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(response); </span><br><span class=\"line\">&#125;) </span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(error); </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"特殊场景处理\">特殊场景处理<a href=\"2018/11/01/请求方法的总结#特殊场景处理\"></a></h4><p>  　在开发过程中，经常会遇到比较尴尬的场景就是多请求的串行与并发，并发比较容易解决，不存在回调地狱，但是代码可读性就会容易变得很渣，而串行问题对于前端是绝望的，最好的办法是后端来做合并，如果后端不做这块的处理，前端就必须来面对回调地狱。</p>\n<h4 id=\"多请求串行\">多请求串行<a href=\"2018/11/01/请求方法的总结#多请求串行\"></a></h4><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ajax</span></span><br><span class=\"line\">$.ajax(&#123; </span><br><span class=\"line\">    url: <span class=\"string\">''</span>,</span><br><span class=\"line\">    data: <span class=\"string\">''</span>,   </span><br><span class=\"line\">    success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;   </span><br><span class=\"line\">        $.ajax(&#123;       </span><br><span class=\"line\">            url: <span class=\"string\">''</span>, </span><br><span class=\"line\">            data: <span class=\"string\">''</span>,      </span><br><span class=\"line\">            success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            </span>) </span>&#123;   </span><br><span class=\"line\">                $.ajax(&#123;    </span><br><span class=\"line\">                    <span class=\"comment\">// 如此一层嵌套一层    </span></span><br><span class=\"line\">                &#125;)     </span><br><span class=\"line\">            &#125;       </span><br><span class=\"line\">        &#125;)   </span><br><span class=\"line\">    &#125;&#125;)</span><br><span class=\"line\"><span class=\"comment\">//axios</span></span><br><span class=\"line\">axios.get(url).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> axios.get(url,&#123;  </span><br><span class=\"line\">        &#123;<span class=\"attr\">name</span>:result.name&#125;  </span><br><span class=\"line\">                     &#125;);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;    </span><br><span class=\"line\">    <span class=\"comment\">//如此一层层嵌套</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"多请求并行\">多请求并行<a href=\"2018/11/01/请求方法的总结#多请求并行\"></a></h4><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ajax 通过计数器实现（虽然Jquery支持$.when的方式，但此处不做案例）</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">all</span>(<span class=\"params\"></span>)</span>&#123;  </span><br><span class=\"line\">    num++;   </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n&gt;=<span class=\"number\">3</span>)<span class=\"built_in\">console</span>.log(<span class=\"string\">'三个请求全部完成'</span>)；</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$.ajax(&#123; </span><br><span class=\"line\">    url: <span class=\"string\">''</span>, </span><br><span class=\"line\">    data: <span class=\"string\">''</span>,  </span><br><span class=\"line\">    success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123; </span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ajax请求1 完成\"</span>);  </span><br><span class=\"line\">        all();  </span><br><span class=\"line\">    &#125;&#125;)</span><br><span class=\"line\">$.ajax(&#123;  </span><br><span class=\"line\">    url: <span class=\"string\">''</span>, </span><br><span class=\"line\">    data: <span class=\"string\">''</span>,   </span><br><span class=\"line\">    success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;    </span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ajax请求2 完成\"</span>);   </span><br><span class=\"line\">        all();</span><br><span class=\"line\">    &#125;&#125;)</span><br><span class=\"line\">$.ajax(&#123;  </span><br><span class=\"line\">    url: <span class=\"string\">''</span>, </span><br><span class=\"line\">    data: <span class=\"string\">''</span>,  </span><br><span class=\"line\">    success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;    </span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ajax请求3 完成\"</span>);  </span><br><span class=\"line\">        all();   </span><br><span class=\"line\">    &#125;&#125;)</span><br><span class=\"line\"><span class=\"comment\">//axios</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInfo</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> axios.get(url);</span><br><span class=\"line\">&#125;<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUser</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> axios.get(url);</span><br><span class=\"line\">&#125;axios.all([getInfo(),</span><br><span class=\"line\">            getUser()]) </span><br><span class=\"line\">    .then(axios.spread(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">info, user</span>) </span>&#123;   </span><br><span class=\"line\">    <span class=\"comment\">// 两个请求现在都执行完成 </span></span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></div></figure>\n\n\n\n\n\n\n\n\n","prev":{"title":"Vue的性能优化","link":"2018/11/21/Vue的性能优化"},"next":{"title":"js中的this指向问题","link":"2018/10/12/js中的this指向问题"},"plink":"http://Li_junhui.github.io.git/2018/11/01/请求方法的总结/"}