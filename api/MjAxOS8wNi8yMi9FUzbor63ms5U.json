{"title":"ES6语法","date":"2019-06-22T05:08:23.000Z","link":"2019/06/22/ES6语法","comments":true,"updated":"2019-09-02T05:09:59.238Z","content":"<h1 id=\"ES6新特性\">ES6新特性<a href=\"2019/06/22/ES6语法#ES6新特性\"></a></h1><p>ES6 = ECMAScript 6</p>\n<h2 id=\"申明变量let和const\">申明变量let和const<a href=\"2019/06/22/ES6语法#申明变量let和const\"></a></h2><h3 id=\"let\">let<a href=\"2019/06/22/ES6语法#let\"></a></h3><h4 id=\"1、let申明变量不存在预解析；\">1、let申明变量不存在预解析；<a href=\"2019/06/22/ES6语法#1、let申明变量不存在预解析；\"></a></h4><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(flag);</span><br><span class=\"line\">let flag = 123;</span><br><span class=\"line\">//结果：报错</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"2、let声明的变量不允许重复\">2、let声明的变量不允许重复<a href=\"2019/06/22/ES6语法#2、let声明的变量不允许重复\"></a></h4><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let flag = 123;</span><br><span class=\"line\">let flag = 456;</span><br><span class=\"line\">console.log(flag);</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"3、ES6引入了块级作用域\">3、ES6引入了块级作用域<a href=\"2019/06/22/ES6语法#3、ES6引入了块级作用域\"></a></h4><p>块内部定义的变量，在外部无法访问(PS: 只要被 { } 包裹起来，就形成块级作用域)</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (true)&#123;</span><br><span class=\"line\">\tlet flag = 123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(flag);</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"4、let必须先声明在使用\">4、let必须先声明在使用<a href=\"2019/06/22/ES6语法#4、let必须先声明在使用\"></a></h4><p>因为用let申明的变量没有预解析</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tem = 123;</span><br><span class=\"line\">let tem;  //报错</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"const\">const<a href=\"2019/06/22/ES6语法#const\"></a></h3><p>const声明的常量不能被重新赋值，且在申明的同时就要被初始化</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const n = 1;//申明的同时就要初始化</span><br><span class=\"line\">n = 2;//此处报错</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"变量的结构赋值\">变量的结构赋值<a href=\"2019/06/22/ES6语法#变量的结构赋值\"></a></h2><h4 id=\"数组的解构赋值\">数组的解构赋值<a href=\"2019/06/22/ES6语法#数组的解构赋值\"></a></h4><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// var a =1,b=2,c=3;//js中的写法</span><br><span class=\"line\">let [a,b,c] = [1,2,3];//node中 数组的解构赋值</span><br><span class=\"line\">console.log(a,b,c);// 1 2 3</span><br><span class=\"line\">//声明时赋初值</span><br><span class=\"line\">let [a=123,b,c] = [,456,];</span><br><span class=\"line\">console.log(a,b,c);// 123 456 undefined</span><br></pre></td></tr></table></div></figure>\n\n<p>利用解构赋值交换两个变量的值</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a = 1;</span><br><span class=\"line\">let b = 2;</span><br><span class=\"line\">[a, b] = [b, a];</span><br><span class=\"line\">console.log(a,b);// 2 1</span><br></pre></td></tr></table></div></figure>\n\n<p>对象的解构赋值</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let &#123;foo,bar&#125; = &#123;foo : &apos;hello&apos;,bar : &apos;hi&apos;&#125;;</span><br><span class=\"line\">console.log(foo,bar);</span><br></pre></td></tr></table></div></figure>\n\n<p>字符串的解构赋值</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let [a,b,c,d,e] = &quot;hello&quot;;</span><br><span class=\"line\">console.log(a,b,c,d,e);//h e l l o</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"字符串相关扩展\">字符串相关扩展<a href=\"2019/06/22/ES6语法#字符串相关扩展\"></a></h2><h3 id=\"includes\">includes<a href=\"2019/06/22/ES6语法#includes\"></a></h3><p>include(str [,index]) str 所要匹配的字符串 ； index 从什么位置开始匹配</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(&apos;hello world&apos;.includes(&apos;world&apos;);//true</span><br><span class=\"line\">console.log(&apos;hello world&apos;.includes(&apos;world&apos;,7);//false</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"startsWith\">startsWith()<a href=\"2019/06/22/ES6语法#startsWith\"></a></h3><p>判断字符串是否特定字符串开始</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(&apos;admin/index.php&apos;.startsWith(&apos;admin&apos;));// true</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"endsWith\">endsWith()<a href=\"2019/06/22/ES6语法#endsWith\"></a></h3><p>判断字符串是否特定字符串结束</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(&apos;admin/index.php&apos;.startsWith(&apos;php&apos;));// true</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"模板字符串\">模板字符串<a href=\"2019/06/22/ES6语法#模板字符串\"></a></h3><p>在js中若要拼接字符串</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">\tname:&apos;张三&apos;,</span><br><span class=\"line\">\tage:13,</span><br><span class=\"line\">\tgender:&apos;男&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var str = &apos;&lt;div&gt;&lt;span&gt;&apos;+obj.name+&apos;&lt;/span&gt;&lt;span&gt;&apos;+obj.age+&apos;&lt;/span&gt;&lt;span&gt;&apos;+obj.gender+&apos;&lt;/span&gt;&lt;/div&gt;&apos;;</span><br><span class=\"line\">console.log(str);//&lt;div&gt;&lt;span&gt;张三&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;&lt;span&gt;男&lt;/span&gt;&lt;/div&gt;</span><br></pre></td></tr></table></div></figure>\n\n<p>利用模板字符串进行拼接</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj = &#123;</span><br><span class=\"line\">\tname:&apos;张三&apos;,</span><br><span class=\"line\">\tage:13,</span><br><span class=\"line\">\tgender:&apos;男&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let str = &apos;&lt;div&gt;</span><br><span class=\"line\">                &lt;span&gt;$&#123;obj.name&#125;&lt;/span&gt;</span><br><span class=\"line\">                &lt;span&gt;$&#123;obj.age&#125;&lt;/span&gt;</span><br><span class=\"line\">                &lt;span&gt;$&#123;obj.gender&#125;&lt;/span&gt;</span><br><span class=\"line\">\t\t\t   &lt;span&gt;$&#123;1+1&#125;&lt;/span&gt;</span><br><span class=\"line\">\t\t\t   &lt;span&gt;$&#123;fn(&apos;你好&apos;)&#125;&lt;/span&gt;</span><br><span class=\"line\">\t\t  &lt;/div&gt;&apos;;</span><br><span class=\"line\">console.log(str);</span><br><span class=\"line\">//&lt;div&gt;</span><br><span class=\"line\">//    &lt;span&gt;张三&lt;/span&gt;</span><br><span class=\"line\">//    &lt;span&gt;13&lt;/span&gt;</span><br><span class=\"line\">//    &lt;span&gt;男&lt;/span&gt;</span><br><span class=\"line\">//\t  &lt;span&gt;2&lt;/span&gt;</span><br><span class=\"line\">//\t  &lt;span&gt;你好&lt;/span&gt;</span><br><span class=\"line\">//&lt;/div&gt;</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"函数的相关扩展\">函数的相关扩展<a href=\"2019/06/22/ES6语法#函数的相关扩展\"></a></h2><p>1、参数的默认值</p>\n<p>2、参数的解构赋值</p>\n<p>3、rest参数</p>\n<p>4、…扩展运算符</p>\n<p>5、箭头函数</p>\n<h3 id=\"参数的默认值\">参数的默认值<a href=\"2019/06/22/ES6语法#参数的默认值\"></a></h3><p>在js中的若要给函数参数指定默认值</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo(param)&#123;</span><br><span class=\"line\">\tlet p = param || &apos;hello&apos;;</span><br><span class=\"line\">\tconsole.log(p);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//foo();</span><br><span class=\"line\">//foo(&apos;nihao&apos;);</span><br></pre></td></tr></table></div></figure>\n\n<p>在ES6中给函数参数指定默认值</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo(param = &apos;hello&apos;)&#123;</span><br><span class=\"line\">\tconsole.log(p);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//foo();</span><br><span class=\"line\">//foo(&apos;nihao&apos;);</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"参数的解构赋值\">参数的解构赋值<a href=\"2019/06/22/ES6语法#参数的解构赋值\"></a></h3><p>默认参数的做法</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo(param = &apos;hello&apos; , age = 12)&#123;</span><br><span class=\"line\">\tconsole.log(param,age);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//foo();</span><br><span class=\"line\">//foo(&apos;nihao&apos;,18);</span><br></pre></td></tr></table></div></figure>\n\n<p>参数的解构赋值的做法</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo(&#123;param,age&#125;&#125;)&#123;</span><br><span class=\"line\">\tconsole.log(param,age);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//foo(&#123;&#125;);  //注意 此时一定要传入一个对象</span><br><span class=\"line\">//添加默认参数</span><br><span class=\"line\">function foo(&#123;param = &apos;hello&apos;,age = 12&#125;&#125;)&#123;</span><br><span class=\"line\">\tconsole.log(param,age);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//foo(&#123;&#125;);  //注意 此时一定要传入一个对象</span><br><span class=\"line\">//foo(&#123;param = &apos;nihao&apos;,age = 18&#125;)</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"rest参数（剩余参数）\">rest参数（剩余参数）<a href=\"2019/06/22/ES6语法#rest参数（剩余参数）\"></a></h3><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo(a,b,...param)&#123; //...param会以数组的形式存储剩余的参数</span><br><span class=\"line\">\tconsole.log(param);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo(1,2,3,4,5,6,7);//[3,4,5,6,7]</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"扩展运算符-…\">扩展运算符 …<a href=\"2019/06/22/ES6语法#扩展运算符-…\"></a></h3><p>使用 … 将数组拆撒后入参</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo(a,b,c,d)&#123;</span><br><span class=\"line\">\tconsole.log(a + b + c + d);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//foo(1,2,3,4);//传统调用方式</span><br><span class=\"line\"></span><br><span class=\"line\">//当要传入一个数组时 arr = [1,2,3,4]</span><br><span class=\"line\">//方法一 使用foo.apply(null,arr);</span><br><span class=\"line\">//方法二 使用 ...   将数组拆散</span><br><span class=\"line\">foo(...arr); //10</span><br></pre></td></tr></table></div></figure>\n\n<p>使用 … 合并数组</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr1 = [1,2,3];</span><br><span class=\"line\">let arr2 = [4,5,6];</span><br><span class=\"line\">let arr3 = [...arr1,...arr2];</span><br><span class=\"line\">console.log(arr3);//[1,2,3,4,5,6]</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"箭头函数\">箭头函数<a href=\"2019/06/22/ES6语法#箭头函数\"></a></h3><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//传统函数声明以及调用</span><br><span class=\"line\">function foo(参数列表)&#123;</span><br><span class=\"line\">\t函数体</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo();</span><br><span class=\"line\">//ES6 中新增的函数申明以及调用  =&gt;</span><br><span class=\"line\">let foo = (形参参数列表) =&gt; &#123;函数体&#125;;</span><br><span class=\"line\">foo(实参列表);</span><br><span class=\"line\">//用处 例子</span><br><span class=\"line\">var arr = [1,2,3,4];</span><br><span class=\"line\">//arr.forEach(function(e,index)&#123;</span><br><span class=\"line\">//    console.log(e);</span><br><span class=\"line\">//\t  console.log(index);</span><br><span class=\"line\">//&#125;);</span><br><span class=\"line\">arr.forEach((e,index) =&gt; &#123;console.log(e);console.log(index)&#125;);</span><br></pre></td></tr></table></div></figure>\n\n<p>箭头函数的注意事项</p>\n<p>1、箭头函数中this取决于函数的定义，而不是函数的调用</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//不使用箭头函数时 this取决于调用者  此时是window</span><br><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">\tname:&quot;张三&quot;,</span><br><span class=\"line\">\tdoSomething: function()&#123;</span><br><span class=\"line\">\t\tsetTimeout(function()&#123;</span><br><span class=\"line\">\t\t\tconsole.log(this);</span><br><span class=\"line\">\t\t&#125;,1000);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.doSomething();//window</span><br><span class=\"line\"></span><br><span class=\"line\">//使用箭头函数中的this 取决函数声明的环境 此时是在obj中声明的  则this指向obj</span><br><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">\tname:&quot;张三&quot;,</span><br><span class=\"line\">\tdoSomething: function()&#123;</span><br><span class=\"line\">\t\tsetTimeout(()=&gt;&#123;</span><br><span class=\"line\">\t\t\tconsole.log(this);</span><br><span class=\"line\">\t\t&#125;,1000);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.doSomething();//obj&#123;name:&quot;张三&quot;&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>2、箭头参数不可以new</p>\n<p>3、箭头函数不可以使用arguments获取参数列表，可以使用rest代替</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let foo = (...param) =&gt; console.log(param);</span><br><span class=\"line\">foo(1,2,3,4);</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"数组的扩展\">数组的扩展<a href=\"2019/06/22/ES6语法#数组的扩展\"></a></h2><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;].keys(); //Array.keys()  返回数组的所有下标[0,1,2]</span><br><span class=\"line\">console.log(a.next());  //迭代返回当前位置的下标 0</span><br><span class=\"line\">console.log(a.next());  //1</span><br><span class=\"line\">console.log(a.next());  //2</span><br><span class=\"line\"></span><br><span class=\"line\">let b = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;].values(); //Array.values()  返回数组的所有值</span><br><span class=\"line\">console.log(b.next());  //迭代返回当前位置的值  a</span><br><span class=\"line\">console.log(b.next());  //b</span><br><span class=\"line\">console.log(b.next());  //c</span><br><span class=\"line\"></span><br><span class=\"line\">//数组查找</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    console.log([1,2,3,4,5,6].find((item)=&gt;&#123;  //find 返回满足条件的第一个元素值</span><br><span class=\"line\">        return item&gt;3;</span><br><span class=\"line\">    &#125;));</span><br><span class=\"line\">    </span><br><span class=\"line\">    console.log([1,2,3,4,5,6].filter((item)=&gt;&#123;  //filter 返回满足条件的所有元素值</span><br><span class=\"line\">        return item&gt;3;</span><br><span class=\"line\">    &#125;));</span><br><span class=\"line\">    </span><br><span class=\"line\">    console.log([1,2,3,4,5,6].findIndex((item)=&gt;&#123; //findIndex 返回满条件的第一个元素下标</span><br><span class=\"line\">        return item&gt;3;</span><br><span class=\"line\">    &#125;));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//数组包含</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    let arr = [123,456,7,8,9,NaN];</span><br><span class=\"line\">    console.log(arr.includes(456));//Array.includes(item);在数组中查询有无item元素 返回boolean</span><br><span class=\"line\">    </span><br><span class=\"line\">    //也可以查询有无非数字</span><br><span class=\"line\">    console.log([1,2,NaN].includes(1));</span><br><span class=\"line\">    console.log([1,2,NaN].includes(NaN));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"Symbol\">Symbol<a href=\"2019/06/22/ES6语法#Symbol\"></a></h2><p>ES6新增数据类型 属于基本数据类型，Symbol不可以new</p>\n<p>Symbol声明的变量是唯一的，意义在于减少命名冲突；</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    //Symbol的变量是唯一的，所以a1和a2永远不相等</span><br><span class=\"line\">    let a1 = Symbol();</span><br><span class=\"line\">    let a2 = Symbol();</span><br><span class=\"line\">    console.log(a1 === a2);</span><br><span class=\"line\">    </span><br><span class=\"line\">   //Symbol.for(key)</span><br><span class=\"line\">   //在使用Symbol时  会生成一个全局注册表，其中的数据以键值对的形式存在；能根据key来拿到对应的value</span><br><span class=\"line\">   //若  a3  a4的key是相同的  那么a3 a4是相同的</span><br><span class=\"line\">    let a3 = Symbol.for(&quot;a3&quot;);</span><br><span class=\"line\">    let a4 = Symbol.for(&quot;a3&quot;);</span><br><span class=\"line\">    console.log(a3 === a4);  //true</span><br><span class=\"line\">    </span><br><span class=\"line\">    //问题  若改变a3的值  a4的值会改变吗？</span><br><span class=\"line\">    //是值复制   还是指针</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"ES6中涉及到的数据结构\">ES6中涉及到的数据结构<a href=\"2019/06/22/ES6语法#ES6中涉及到的数据结构\"></a></h2><h3 id=\"数组Array\">数组Array<a href=\"2019/06/22/ES6语法#数组Array\"></a></h3><p>数组中的元素可以重复，且数组中元素的排列是有序的（因此可以通过下标访问）</p>\n<h3 id=\"集合Set\">集合Set<a href=\"2019/06/22/ES6语法#集合Set\"></a></h3><p>集合的元素是唯一的，不可以重复出现，且集合中的元素是无序的（因此无法通过下标访问集合中的元素）</p>\n<h4 id=\"Set中的方法\">Set中的方法<a href=\"2019/06/22/ES6语法#Set中的方法\"></a></h4><div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th><strong>set.add(ele)</strong></th>\n<th><strong>向set集合中追加ele元素</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>set.has(ele)</strong></td>\n<td><strong>判断set集合中是否存在ele元素</strong></td>\n</tr>\n<tr>\n<td><strong>set.delete(ele)</strong></td>\n<td><strong>从集合中删除ele元素</strong></td>\n</tr>\n<tr>\n<td><strong>set.clear()</strong></td>\n<td><strong>清空set集合</strong></td>\n</tr>\n<tr>\n<td><strong>set.forEach( (ele) =&gt;{} )</strong></td>\n<td><strong>遍历集和</strong></td>\n</tr>\n</tbody></table></div></div>\n<p>set对象的创建：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let set = new set();</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"数组与集合的互相转换\">数组与集合的互相转换<a href=\"2019/06/22/ES6语法#数组与集合的互相转换\"></a></h3><h4 id=\"数组-gt-集合\">数组==&gt;集合<a href=\"2019/06/22/ES6语法#数组-gt-集合\"></a></h4><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr = [1,2,3];</span><br><span class=\"line\">let set = new set(arr);</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"集合-gt-数组\">集合==&gt;数组<a href=\"2019/06/22/ES6语法#集合-gt-数组\"></a></h4><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let set = new set();</span><br><span class=\"line\">let arr = [...set];</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"weakSet\">weakSet<a href=\"2019/06/22/ES6语法#weakSet\"></a></h3><p><strong>WeakSet 结构与 Set 类似，也是不重复的值的集合。但是，它与 Set 有下面区别。</strong></p>\n<p> 1.WeakSet 的成员只能是对象，而不能是其他类型的值。</p>\n<p> 2.WeakSet 中的对象都是弱引用，即垃圾回收机制不考虑 WeakSet 对该对象的引用，也就是说，如果其他对象都不 再引用该对象，那么垃圾回收机制会自动回收该对象所占用的内存，不考虑该对象还存在于 WeakSet 之中。</p>\n<p> 3.WeakSet 只有add/delete/clear/has三个方法，不能遍历，没有size属性等</p>\n<h3 id=\"Map\">Map<a href=\"2019/06/22/ES6语法#Map\"></a></h3><p>Map也是由键值对构成的，和对象的区别在于Map的key也可以是一个对象，Object只可以是字符串</p>\n<h2 id=\"代理和反射\">代理和反射<a href=\"2019/06/22/ES6语法#代理和反射\"></a></h2><h3 id=\"代理Proxy\">代理Proxy<a href=\"2019/06/22/ES6语法#代理Proxy\"></a></h3><p>代理：通过代理对象访问目标对象</p>\n<p>作用：</p>\n<p> 1、控制目标对象的访问权限</p>\n<p> 2、扩展目标对象方法</p>\n<p>创建目标对象</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let targetObject = &#123;</span><br><span class=\"line\">\tname:&quot;target&quot;,</span><br><span class=\"line\">    type:&quot;object&quot;,</span><br><span class=\"line\">\tfun:function()&#123;</span><br><span class=\"line\">\t\tconsole.log(&apos;目标对象的fun&apos;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>创建代理对象</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var p = new Proxy(targetObject,&#123;</span><br><span class=\"line\">    //target 就是目标的对象</span><br><span class=\"line\">    //key 就是目标对象中的每一个属性和方法</span><br><span class=\"line\">    //当代理对象直接获取属性和方法的等信息的时候都会来调用get方法</span><br><span class=\"line\">\tget(target,key)&#123;</span><br><span class=\"line\">\t\tif(key === &apos;fun&apos;)&#123;</span><br><span class=\"line\">\t\t\tconsole.log(&quot;代理对象调用目标对象的fun&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn target[key];</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">    //当给对象的属性和方法赋值的时候调用set方法</span><br><span class=\"line\">    //target 就是目标的对象</span><br><span class=\"line\">    //key 就是目标对象中的每一个属性和方法</span><br><span class=\"line\">    //value 属性值</span><br><span class=\"line\">    set(target,key,value)&#123;</span><br><span class=\"line\">    //如果key为type的时候就不给目标对象赋值</span><br><span class=\"line\">    \tif(key === &apos;type&apos;)&#123;</span><br><span class=\"line\">        \treturn target[type];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    \telse&#123;</span><br><span class=\"line\">            target[key] = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">    //当通过 xx in obj 的时候调用has方法</span><br><span class=\"line\">    has(target,key)&#123;</span><br><span class=\"line\">        if(key === &apos;type&apos;)&#123;</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else&#123;</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    //当删除对象的属性时 调用此方法</span><br><span class=\"line\">    deleteProperty(target,key)&#123;</span><br><span class=\"line\">        if(key === &apos;age&apos;)&#123;</span><br><span class=\"line\">            delete target[key];</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else&#123;</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">p.fun(); //代理对象调用目标对象的fun     目标对象的fun</span><br><span class=\"line\">p.name = &apos;temp&apos;; //修改无效  当使用点的方式来访问属性时 会调用set函数  而set函数中设置了对name的修改权限</span><br><span class=\"line\">console.log(p);  //&#123; name: &apos;target&apos;, type: &apos;object&apos;, fun: [Function: fun] &#125;</span><br><span class=\"line\">p.type = &apos;temp&apos;; //修改成功  set中没有对type的权限要求</span><br><span class=\"line\">console.log(p); //&#123; name: &apos;target&apos;, type: &apos;temp&apos;, fun: [Function: fun] &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&apos;type&apos; in p); //true  当使用in判断对象中是否有某属性时 会调用has函数 而我们在has中对type设置了权限 则无法访问</span><br><span class=\"line\">console.log(&apos;name&apos; in p); //true  未对name设置  则访问成功</span><br><span class=\"line\"></span><br><span class=\"line\">delete p.name;  //删除失败   当使用点的方式来删除某属性时会默认调用deleteProperty方法 而我们在deleteProperty中限制了对name的删除权限 则删除失败</span><br><span class=\"line\">delete p.type;  //删除成功   </span><br><span class=\"line\">console.log(p); //&#123; name: &apos;target&apos;, fun: [Function: fun] &#125;</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"反射Reflect\">反射Reflect<a href=\"2019/06/22/ES6语法#反射Reflect\"></a></h3><p> 反射机制是指程序在运行的时候访问、检测和修改它本身状态或行为的一种能力，例如一个对象能够在运行时知道自己有哪些方法和属性。</p>\n<p> 反射的概念在编译型的编程语言中比较明显，比如java、C#、Object-c等。对于 <code>JavaScript</code>来说，反射就是获取对象的内部结构的信息，所以JS中的反射随处可见，比如for…in方式遍历对象。</p>\n<p> 从ECMAScript6开始，JS引入Reflect这个API专门用于操作反射。</p>\n<p> ES6中的反射，将抛出异常，异常捕获简化为返回一个boolean值来表示其是否正常运行</p>\n","prev":{"title":"Express","link":"2019/07/13/Express"},"next":{"title":"MongoDB","link":"2019/05/02/MongoDB"},"plink":"http://Li_junhui.github.io.git/2019/06/22/ES6语法/","toc":[{"title":"ES6新特性","id":"ES6新特性","index":"1","children":[{"title":"申明变量let和const","id":"申明变量let和const","index":"1.1","children":[{"title":"let","id":"let","index":"1.1.1"},{"title":"const","id":"const","index":"1.1.2"}]},{"title":"变量的结构赋值","id":"变量的结构赋值","index":"1.2"},{"title":"字符串相关扩展","id":"字符串相关扩展","index":"1.3","children":[{"title":"includes","id":"includes","index":"1.3.1"},{"title":"startsWith()","id":"startsWith","index":"1.3.2"},{"title":"endsWith()","id":"endsWith","index":"1.3.3"},{"title":"模板字符串","id":"模板字符串","index":"1.3.4"}]},{"title":"函数的相关扩展","id":"函数的相关扩展","index":"1.4","children":[{"title":"参数的默认值","id":"参数的默认值","index":"1.4.1"},{"title":"参数的解构赋值","id":"参数的解构赋值","index":"1.4.2"},{"title":"rest参数（剩余参数）","id":"rest参数（剩余参数）","index":"1.4.3"},{"title":"扩展运算符 …","id":"扩展运算符-…","index":"1.4.4"},{"title":"箭头函数","id":"箭头函数","index":"1.4.5"}]},{"title":"数组的扩展","id":"数组的扩展","index":"1.5"},{"title":"Symbol","id":"Symbol","index":"1.6"},{"title":"ES6中涉及到的数据结构","id":"ES6中涉及到的数据结构","index":"1.7","children":[{"title":"数组Array","id":"数组Array","index":"1.7.1"},{"title":"集合Set","id":"集合Set","index":"1.7.2"},{"title":"数组与集合的互相转换","id":"数组与集合的互相转换","index":"1.7.3"},{"title":"weakSet","id":"weakSet","index":"1.7.4"},{"title":"Map","id":"Map","index":"1.7.5"}]},{"title":"代理和反射","id":"代理和反射","index":"1.8","children":[{"title":"代理Proxy","id":"代理Proxy","index":"1.8.1"},{"title":"反射Reflect","id":"反射Reflect","index":"1.8.2"}]}]}]}