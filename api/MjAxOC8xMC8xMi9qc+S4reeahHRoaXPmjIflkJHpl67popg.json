{"title":"js中的this指向问题","date":"2018-10-12T12:17:50.000Z","link":"2018/10/12/js中的this指向问题","comments":true,"updated":"2019-08-31T10:25:57.371Z","content":"<p>  首先，必须搞清楚在<code>JS</code>里面，函数的几种调用方式: </p>\n<ul>\n<li>普通函数调用</li>\n<li>作为方法来调用</li>\n<li>作为构造函数来调用</li>\n<li>使用apply、call方法来调用</li>\n<li>function.prototype.bind方法</li>\n<li><code>es6</code>箭头函数  </li>\n</ul>\n<p>但是不管哪种方法调用，请记住一点：谁调用这个函数和方法this就指向谁。</p>\n<p>接下来就分情况来讨论这些不同的情况：</p>\n<h4 id=\"普通函数调用\">普通函数调用<a href=\"2018/10/12/js中的this指向问题#普通函数调用\"></a></h4><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">person</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name=<span class=\"string\">\"xl\"</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">person();  <span class=\"comment\">//输出  window  xl</span></span><br></pre></td></tr></table></div></figure>\n\n<p>  在这段代码中person函数作为普通函数调用，实际上person是作为全局对象window的一个方法来进行调用的,即window.person(); 所以这个地方是window对象调用了person方法,那么person函数当中的this即指window,同时window还拥有了另外一个属性name,值为xl.</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name=<span class=\"string\">\"xl\"</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">person</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">person(); <span class=\"comment\">//输出 xl</span></span><br></pre></td></tr></table></div></figure>\n\n<p>  同样这个地方person作为window的方法来调用，在代码的一开始定义了一个全局变量name，值为xl,它相当于window的一个属性,即window.name=”xl”,又因为在调用person的时候this是指向window的，因此这里会输出xl.</p>\n<h4 id=\"作为方法来调用\">作为方法来调用<a href=\"2018/10/12/js中的this指向问题#作为方法来调用\"></a></h4><p>  在上面的代码中，普通函数的调用即是作为window对象的方法进行调用。显然this关键字指向了window对象.  再来看下其他的形式</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name=<span class=\"string\">\"XL\"</span>;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> person=&#123;</span><br><span class=\"line\">     name:<span class=\"string\">\"xl\"</span>,</span><br><span class=\"line\">     showName:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">         <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> person.showName();  <span class=\"comment\">//输出  xl</span></span><br><span class=\"line\"><span class=\"comment\">//这里是person对象调用showName方法，很显然this关键字是指向person对象的，所以会输出name</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"keyword\">var</span> showNameA=person.showName;</span><br><span class=\"line\"> showNameA();    <span class=\"comment\">//输出  XL</span></span><br><span class=\"line\"> <span class=\"comment\">//这里将person.showName方法赋给showNameA变量，此时showNameA变量相当于window对象的一个属性，因此showNameA()执行的时候相当于window.showNameA(),即window对象调用showNameA这个方法，所以this关键字指向window</span></span><br></pre></td></tr></table></div></figure>\n\n<p>再换种形式：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> personA=&#123;</span><br><span class=\"line\">    name:<span class=\"string\">\"xl\"</span>,</span><br><span class=\"line\">    showName:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> personB=&#123;</span><br><span class=\"line\">    name:<span class=\"string\">\"XL\"</span>,</span><br><span class=\"line\">    sayName:personA.showName</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">personB.sayName();  <span class=\"comment\">//输出 XL</span></span><br><span class=\"line\"><span class=\"comment\">//虽然showName方法是在personA这个对象中定义，但是调用的时候却是在personB这个对象中调用，因此this对象指向</span></span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"作为构造函数调用\">作为构造函数调用<a href=\"2018/10/12/js中的this指向问题#作为构造函数调用\"></a></h4><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span>  <span class=\"title\">Person</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.name=name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> personA=Person(<span class=\"string\">\"xl\"</span>);   </span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(personA.name); <span class=\"comment\">// 输出  undefined</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.name);<span class=\"comment\">//输出  xl</span></span><br><span class=\"line\">  <span class=\"comment\">//上面代码没有进行new操作，相当于window对象调用Person(\"xl\")方法，那么this指向window对象，并进行赋值操作window.name=\"xl\".</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">var</span> personB=<span class=\"keyword\">new</span> Person(<span class=\"string\">\"xl\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(personB.name);<span class=\"comment\">// 输出 xl</span></span><br><span class=\"line\"> <span class=\"comment\">//这部分代码的解释见下</span></span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"new操作符\">new操作符<a href=\"2018/10/12/js中的this指向问题#new操作符\"></a></h4><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//下面这段代码模拟了new操作符(实例化对象)的内部过程</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">person</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> o=&#123;&#125;;</span><br><span class=\"line\">      o.__proto__=Person.prototype;  <span class=\"comment\">//原型继承</span></span><br><span class=\"line\">      Person.call(o,name);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> personB=person(<span class=\"string\">\"xl\"</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(personB.name);  <span class=\"comment\">// 输出  xl</span></span><br></pre></td></tr></table></div></figure>\n\n<p> 这段代码涉及到了<em><code>proto</code></em>及prototype的概念</p>\n<ol>\n<li><p>在person里面首先创建一个空对象o，将o的proto指向Person.prototype完成对原型的属性和方法的继承</p>\n</li>\n<li><p>Person.call(o,name)这里即函数Person作为apply/call调用(具体内容下方)，将Person对象里的this改为o，即完成了o.name=name操作</p>\n<p>3.返回对象o</p>\n</li>\n</ol>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">因此<span class=\"string\">`person(\"xl\")`</span>返回了一个继承了<span class=\"string\">`Person.prototype`</span>对象上的属性和方法，以及拥有<span class=\"string\">`name`</span>属性为<span class=\"string\">\"xl\"</span>的对象，并将它赋给变量<span class=\"string\">`personB`</span>.</span><br><span class=\"line\">所以<span class=\"string\">`console.log(personB.name)`</span>会输出<span class=\"string\">\"xl\"</span></span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"call和apply方法的调用\">call和apply方法的调用<a href=\"2018/10/12/js中的this指向问题#call和apply方法的调用\"></a></h4><p>  在JS里函数也是对象，因此函数也有方法。从Function.prototype上继承到Function.prototype.call/Function.prototype.apply方法 call/apply方法最大的作用就是能改变this关键字的指向.</p>\n<p>Obj.method.apply(AnotherObj,arguments);</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">var</span> name=<span class=\"string\">\"XL\"</span>;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> Person=&#123;</span><br><span class=\"line\">     name:<span class=\"string\">\"xl\"</span>,</span><br><span class=\"line\">     showName:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">         <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> Person.showName.call(); <span class=\"comment\">//输出 \"XL\"</span></span><br><span class=\"line\"> <span class=\"comment\">//这里call方法里面的第一个参数为空，默认指向window。</span></span><br><span class=\"line\"><span class=\"comment\">//虽然showName方法定义在Person对象里面，但是使用call方法后，将showName方法里面的this指向了window。因此最后会输出\"XL\";</span></span><br><span class=\"line\">funtion FruitA(n1,n2)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.n1=n1;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.n2=n2;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.change=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x,y</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.n1=x;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.n2=y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fruitA=<span class=\"keyword\">new</span> FruitA(<span class=\"string\">\"cheery\"</span>,<span class=\"string\">\"banana\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> FruitB=&#123;</span><br><span class=\"line\">    n1:<span class=\"string\">\"apple\"</span>,</span><br><span class=\"line\">    n2:<span class=\"string\">\"orange\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">fruitA.change.call(FruitB,<span class=\"string\">\"pear\"</span>,<span class=\"string\">\"peach\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(FruitB.n1); <span class=\"comment\">//输出 pear</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(FruitB.n2);<span class=\"comment\">// 输出 peach</span></span><br></pre></td></tr></table></div></figure>\n\n<p>  FruitB调用fruitA的change方法，将fruitA中的this绑定到对象FruitB上。</p>\n<h4 id=\"function-prototype-bind-方法\">function.prototype.bind()方法<a href=\"2018/10/12/js中的this指向问题#function-prototype-bind-方法\"></a></h4><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name=<span class=\"string\">\"XL\"</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name=name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.sayName=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"my name is \"</span>+<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">        &#125;,<span class=\"number\">50</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person=<span class=\"keyword\">new</span> Person(<span class=\"string\">\"xl\"</span>);</span><br><span class=\"line\">person.sayName()  <span class=\"comment\">//输出  “my name is XL”;</span></span><br><span class=\"line\">                   <span class=\"comment\">//这里的setTimeout()定时函数,相当于window.setTimeout(),由window这个全局对象对调用,因此this的指向为window, 则this.name则为XL</span></span><br></pre></td></tr></table></div></figure>\n\n<p>那么如何才能输出<code>&quot;my name is xl&quot;</code>呢？</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name=<span class=\"string\">\"XL\"</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name=name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.sayName=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"my name is \"</span>+<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">        &#125;.bind(<span class=\"keyword\">this</span>),<span class=\"number\">50</span>)  <span class=\"comment\">//注意这个地方使用的bind()方法，绑定setTimeout里面的匿名函数的this一直指向Person对象</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person=<span class=\"keyword\">new</span> Person(<span class=\"string\">\"xl\"</span>);</span><br><span class=\"line\">person.sayName(); <span class=\"comment\">//输出 “my name is xl”;</span></span><br></pre></td></tr></table></div></figure>\n\n<p>  这里setTimeout(function(){console.log(this.name)}.bind(this),50);,匿名函数使用bind(this)方法后创建了新的函数，这个新的函数不管在什么地方执行，this都指向的Person,而非window,因此最后的输出为”my name is xl”而不是”my name is XL”  另外几个需要注意的地方： setTimeout/setInterval/匿名函数执行的时候，this默认指向window对象，除非手动改变this的指向。在《javascript高级程序设计》当中，写到：“超时调用的代码(setTimeout)都是在全局作用域中执行的，因此函数中的this的值，在非严格模式下是指向window对象，在严格模式下是指向undefined”。本文都是在非严格模式下的情况。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name=<span class=\"string\">\"XL\"</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.name=<span class=\"string\">\"xl\"</span>;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.showName=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      setTimeout(<span class=\"keyword\">this</span>.showName,<span class=\"number\">50</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> person=<span class=\"keyword\">new</span> Person(); <span class=\"comment\">//输出 \"XL\"</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//在setTimeout(this.showName,50)语句中，会延时执行this.showName方法</span></span><br><span class=\"line\">  <span class=\"comment\">//this.showName方法即构造函数Person()里面定义的方法。50ms后，执行this.showName方法，this.showName里面的this此时便指向了window对象。则会输出\"XL\";</span></span><br></pre></td></tr></table></div></figure>\n\n<p>修改上面代码：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name=<span class=\"string\">\"XL\"</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.name=<span class=\"string\">\"xl\"</span>;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> that=<span class=\"keyword\">this</span>;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.showName=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(that.name);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      setTimeout(<span class=\"keyword\">this</span>.showName,<span class=\"number\">50</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> person=<span class=\"keyword\">new</span> Person(); <span class=\"comment\">//输出 \"xl\"</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">//这里在Person函数当中将this赋值给that，即让that保存Person对象，因此在setTimeout(this.showName,50)执行过程当中，console.log(that.name)即会输出Person对象的属性\"xl\"</span></span><br></pre></td></tr></table></div></figure>\n\n<p>匿名函数：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name=<span class=\"string\">\"XL\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> person=&#123;</span><br><span class=\"line\">      name:<span class=\"string\">\"xl\"</span>,</span><br><span class=\"line\">      showName:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      sayName:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">          (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback</span>)</span>&#123;</span><br><span class=\"line\">              callback();</span><br><span class=\"line\">         &#125;)(<span class=\"keyword\">this</span>.showName)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> person.sayName();  <span class=\"comment\">//输出 XL</span></span><br><span class=\"line\"> <span class=\"keyword\">var</span> name=<span class=\"string\">\"XL\"</span>;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> person=&#123;</span><br><span class=\"line\">     name:<span class=\"string\">\"xl\"</span>,</span><br><span class=\"line\">     showName:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">         <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     sayName:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">var</span> that=<span class=\"keyword\">this</span>;</span><br><span class=\"line\">         (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback</span>)</span>&#123;</span><br><span class=\"line\">             callback();</span><br><span class=\"line\">         &#125;)(that.showName)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> person.sayName() ;  <span class=\"comment\">//输出  \"xl\"</span></span><br><span class=\"line\"> <span class=\"comment\">//匿名函数的执行同样在默认情况下this是指向window的，除非手动改变this的绑定对象</span></span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"Eval函数\">Eval函数<a href=\"2018/10/12/js中的this指向问题#Eval函数\"></a></h4><p>该函数执行的时候，this绑定到当前作用域的对象上。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name=<span class=\"string\">\"XL\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person=&#123;</span><br><span class=\"line\">    name:<span class=\"string\">\"xl\"</span>,</span><br><span class=\"line\">    showName:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">eval</span>(<span class=\"string\">\"console.log(this.name)\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">person.showName();  <span class=\"comment\">//输出  \"xl\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a=person.showName;</span><br><span class=\"line\">a();  <span class=\"comment\">//输出  \"XL\"</span></span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"箭头函数\">箭头函数<a href=\"2018/10/12/js中的this指向问题#箭头函数\"></a></h4><p>  es6里面this指向固定化，始终指向外部对象，因为箭头函数没有this,因此它自身不能进行new实例化,同时也不能使用call, apply, bind等方法来改变this的指向  </p>\n  <figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Timer</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">this</span>.seconds = <span class=\"number\">0</span>;</span><br><span class=\"line\">     setInterval( <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">this</span>.seconds ++, <span class=\"number\">1000</span>);</span><br><span class=\"line\"> &#125; </span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"keyword\">var</span> timer = <span class=\"keyword\">new</span> Timer();</span><br><span class=\"line\"> </span><br><span class=\"line\"> setTimeout( <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(timer.seconds), <span class=\"number\">3100</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"comment\">// 在构造函数内部的setInterval()内的回调函数，this始终指向实例化的对象，并获取实例化对象的seconds的属性,每1s这个属性的值都会增加1。否则最后在3s后执行setTimeOut()函数执行后输出的是0</span></span><br></pre></td></tr></table></div></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n","prev":{"title":"请求方法的总结","link":"2018/11/01/请求方法的总结"},"next":{"title":"从输入URL到页面呈现发生了什么","link":"2018/09/28/从输入URL到页面呈现发生了什么"},"plink":"http://Li_junhui.github.io.git/2018/10/12/js中的this指向问题/"}