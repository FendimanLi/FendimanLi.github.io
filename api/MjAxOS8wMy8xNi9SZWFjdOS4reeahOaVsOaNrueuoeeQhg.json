{"title":"React中的数据管理","date":"2019-03-16T03:46:58.000Z","link":"2019/03/16/React中的数据管理","comments":true,"updated":"2019-09-01T07:04:32.362Z","content":"<h4 id=\"一、原生React组件的数据传输管理\">一、原生React组件的数据传输管理<a href=\"2019/03/16/React中的数据管理#一、原生React组件的数据传输管理\"></a></h4><p>原生组件之间的数据传输主要依赖两个关键词：属性（props）和状态（state）。每个组件都是一个对象，props是对象的一个属性，组件可以通过props进行传递。    React的核心思想是组件化的思想，应用由组件搭建而成，而组件中最重要的概念是state（状态），state是一个组件的UI数据模型，是组件渲染时的数据依赖。state和props的最大区别在于props是不可变的，而state是可变的。具体内容后面会详细介绍。</p>\n<p>原生React组件之间数据传递场景可分为以下4种：</p>\n<ul>\n<li><p>组件内部的数据传输</p>\n</li>\n<li><p>父组件向子组件传值</p>\n</li>\n<li><p>子组件向父组件传值</p>\n</li>\n<li><p>兄弟组件之间的传值</p>\n</li>\n</ul>\n<h5 id=\"组件内部的数据传输\">组件内部的数据传输<a href=\"2019/03/16/React中的数据管理#组件内部的数据传输\"></a></h5><p>在初学过程的项目开发中常常会有尝试DOM操作的冲动，虽然大部分情况下这种尝试是错误的，但是在某些时候还是不得不需要获取DOM的值进行操作。例如：点击一个按钮之后触发点击事件，让一个文本框获得焦点。jQuery开发者的第一反应肯定是给button绑定点击事件，然后在事件中通过$(‘select’)获取到要操作的节点，再给节点添加焦点。然而在React中这操作是不允许的，而React中应该怎么做呢？</p>\n<p>React refs属性：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span>(</span>&#123;</span><br><span class=\"line\">  handleClick = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用原生的 DOM API 获取焦点</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.refs.myInput.focus();</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//  当组件插入到 DOM 后，ref 属性添加一个组件的引用于到 this.refs</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;input type=<span class=\"string\">\"text\"</span> ref=<span class=\"string\">\"myInput\"</span> /&gt;</span><br><span class=\"line\">        &lt;input</span><br><span class=\"line\">          type=<span class=\"string\">\"button\"</span></span><br><span class=\"line\">          value=<span class=\"string\">\"点我输入框获取焦点\"</span></span><br><span class=\"line\">          onClick=&#123;<span class=\"keyword\">this</span>.handleClick&#125;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;);</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">ReactDOM.render(</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;MyComponent /</span>&gt;,</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'example'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></div></figure>\n\n<p>我们可以从上面的代码看到其中的ref在功能上扮演了一个标示符（id）的角色，this.refs.myInput.focus()也有一种document.getElementById(“myInput”).focus()的味道。</p>\n<p>上面的操作我们也称为React的表单事件，React表单事件中除了ref具有关键作用外，还有一个另外关键参数‘event’。例如：当我们需要实时获取到一个文本框内容的时候，然后进行一个判断，当满足某个条件的时候触发另一个事件。这个时候就需要这个关键的参数’event’。</p>\n<p>React事件–event参数：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span></span>&#123;</span><br><span class=\"line\">    handleChange = <span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(event.target.value === <span class=\"string\">'show'</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.refs.showText);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    render()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>(</span><br><span class=\"line\">            &lt;div&gt;</span><br><span class=\"line\">                &lt;input type=<span class=\"string\">\"text\"</span> onChange=&#123;<span class=\"keyword\">this</span>.handleChange&#125;/&gt;</span><br><span class=\"line\">                &lt;p ref=<span class=\"string\">'showText'</span>&gt;条件满足我就会显示在控制台&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;/</span>div&gt;   </span><br><span class=\"line\">\t\t)</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> MyComponent;</span><br></pre></td></tr></table></div></figure>\n\n<p>上面的实现效果就是，通过event.target.value获取当前input中的内容，当input中输入的内容是show的时候，控制台就将ref为showText的整个节点内容打印出来，从这个实例中我们也可以看到，event作为一个默认参数将对应的内容节点进行了读取。</p>\n<p>因此在组件内部设计DOM操作数据传递主要就是这两种方式，可以根据不同的场景选择不同的方式。虽然ref适合所有组件元素，但是ref在正常情况下都不推荐使用，后面会进行state管理组件状态，避免进行DOM的直接操作。</p>\n<h5 id=\"父组件向子组件传值\">父组件向子组件传值<a href=\"2019/03/16/React中的数据管理#父组件向子组件传值\"></a></h5><p>父组件与子组件之间的通信常常使用props进行，具体如下：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React,&#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChildComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span></span>&#123;</span><br><span class=\"line\">    render ()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\"></span><br><span class=\"line\">            &lt;div&gt;</span><br><span class=\"line\">                &lt;h1&gt;&#123;<span class=\"keyword\">this</span>.props.title&#125;&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                &lt;span&gt;&#123;this.props.content&#125;&lt;/</span>span&gt;</span><br><span class=\"line\">            &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">        )</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">class ParentComponent extends Component &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    render ()&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        return (</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                &lt;ChildComponent title=\"父组件与子组件的数据传输测试\" content=\"我是传送给子组件span中显示的数据\" /</span>&gt;</span><br><span class=\"line\">                &lt;p&gt;我是父组件的内容&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;/</span>div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> ParentComponent;</span><br></pre></td></tr></table></div></figure>\n\n<p>上面事例中展示了父组件向子组件传递了两个props属性分别为title和content，子组件通过this.props获取到对应的两个属性，并将其展示出来，这个过程就是一个父与子组件数据交互的方式。但是也可以看出props的值是不变的，父传给子什么样的props内容就只能接受什么样的使用，不能在子中重新赋值。</p>\n<h5 id=\"子组件向父组件传值\">子组件向父组件传值<a href=\"2019/03/16/React中的数据管理#子组件向父组件传值\"></a></h5><p>本例中将引入管理组件状态的sate，并进行初始化。具体如下</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"comment\">//子组件</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    render()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            &lt;div&gt;</span><br><span class=\"line\">                请输入邮箱：&lt;input onChange=&#123;<span class=\"keyword\">this</span>.props.handleEmail&#125;/&gt;</span><br><span class=\"line\">            &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        )</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/父组件，此处通过event.target.value获取子组件的值</span></span><br><span class=\"line\"><span class=\"regexp\">class Parent extends Component&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    constructor(props)&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        super(props);</span></span><br><span class=\"line\"><span class=\"regexp\">        this.state = &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">            email:''</span></span><br><span class=\"line\"><span class=\"regexp\">        &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    handleEmail = (event) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        this.setState(&#123;email: event.target.value&#125;);</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;;</span></span><br><span class=\"line\"><span class=\"regexp\">    render()&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        return (</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                &lt;div&gt;用户邮箱：&#123;this.state.email&#125;&lt;/</span>div&gt;</span><br><span class=\"line\">                &lt;Child name=<span class=\"string\">\"email\"</span> handleEmail=&#123;<span class=\"keyword\">this</span>.handleEmail&#125;/&gt;</span><br><span class=\"line\">            &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        )</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">export default Parent;</span></span><br></pre></td></tr></table></div></figure>\n\n<p>通过上面的例子中可以看出子组件传递给父组件数据其实也很简单。简单概括起来就是：React中state数据状态改变了，组件才会update。父写好state和处理该state的函数，同时将函数名通过props的形式传入子，子调用父的函数，同时引起state的变化。子组件要写在父组件之前。</p>\n<p>从本事例中也可以看出state可以通过setState进行赋值，因为state是可变的，表示的是某一时间点的组件状态。</p>\n<h5 id=\"兄弟组件之间的传值\">兄弟组件之间的传值<a href=\"2019/03/16/React中的数据管理#兄弟组件之间的传值\"></a></h5><p>两个组件不是父子关系，但有相同的父组件时，将这两个称为兄弟组件。严格来说React是不能进行兄弟间的数据直接绑定的，因为React数据绑定是单向的，所以才能使React的状态处于一个可控的范围。对于特殊的应用场景中，由两个组件共享：如果组件需要数据渲染，则由父组件通过props传递给该组件；如果组件需要改变数据，则父组件传递一个改变数据的回调函数给该组件，并在对于事件中调用。从而实现兄弟组件之前的数据传递。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"comment\">//子组件</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    render()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\"></span><br><span class=\"line\">            &lt;div&gt;</span><br><span class=\"line\">                我是子组件邮箱：&lt;input onChange=&#123;<span class=\"keyword\">this</span>.props.handleEmail&#125; defaultValue=&#123;<span class=\"keyword\">this</span>.props.value&#125; /&gt;</span><br><span class=\"line\">            &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">        )</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/兄弟组件</span></span><br><span class=\"line\"><span class=\"regexp\">class ChildBrother extends Component &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    render()&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        return (</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                我是兄弟组件:&#123;this.props.value&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;/</span>div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//父组件，此处通过event.target.value获取子组件的值</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Parent</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(props)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = &#123;</span><br><span class=\"line\">            email:<span class=\"string\">''</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    handleEmail = <span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">email</span>: event.target.value&#125;);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    render()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\"></span><br><span class=\"line\">            &lt;div&gt;</span><br><span class=\"line\">                &lt;div&gt;我是父组件邮箱：&#123;<span class=\"keyword\">this</span>.state.email&#125;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                &lt;Child handleEmail=&#123;this.handleEmail&#125; value=&#123;this.state.email&#125;/</span>&gt;</span><br><span class=\"line\">                &lt;ChildBrother value=&#123;<span class=\"keyword\">this</span>.state.email&#125;/&gt;</span><br><span class=\"line\">            &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">        )</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">export default Parent;</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面的例子中就是children数据的值改变后存储在父组件的state中，然后再通过props传递给兄弟组件。从而实现兄弟组件之间的数据传递。</p>\n<h4 id=\"二、基于Redux的React项目开发中的数据管理\">二、基于Redux的React项目开发中的数据管理<a href=\"2019/03/16/React中的数据管理#二、基于Redux的React项目开发中的数据管理\"></a></h4><p>前面在分析原生的React组件实现数据传输中讲到两个关键词：state和props，在项目的实际开发过程中，这里的state可能包括服务器响应数据、缓存数据、本地生成尚未持久化到服务器的数据。也包括UI状态：比如激活的路由，被选中的标签，是否加载动效或者分页器等等。</p>\n<p>管理不断变化的state非常困难，如果一个model的变化会引起另一个model的变化，那么View变化时，就可能会引起对应model以及另一个model的变化。依次地可能会引起另一个view的变化。</p>\n<p>因此在这些问题下便产生了Redux，在Redux的基础概念中通过限制更新发生的事情和方法试图让state变化变得可预测。Redux可分为三个基本原则来描述：</p>\n<p>单一数据源：整个应用的state被存放在一棵object tree中，并且这个object tree只存放在唯一一个stroe中</p>\n<p>state是只读的：唯一改变state的方法就是触发action，action是一个用于描述已发生事件的普通对象。</p>\n<p>使用纯函数来执行修改，为了描述action如何改变state tree，你需要编写reducers。</p>\n<p>Redux的基本工作流程：store进行管理state和reducers，reducers接收一个action和一个原始的state，dispatch进行触发一个action。</p>\n<p>一个简单的例子：基本功能就是在一个任务管理器中添加一个新的任务，我们主要看其数据走向。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Action：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> nextTodoId = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> addTodo = <span class=\"function\">(<span class=\"params\">text</span>) =&gt;</span> (&#123;</span><br><span class=\"line\">  type: <span class=\"string\">'ADD_TODO'</span>,</span><br><span class=\"line\">  id: nextTodoId++,</span><br><span class=\"line\">  text</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">Reducers：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> todos = <span class=\"function\">(<span class=\"params\">state = [], action</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (action.type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'ADD_TODO'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> [</span><br><span class=\"line\">        ...state,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          id: action.id,</span><br><span class=\"line\">          text: action.text,</span><br><span class=\"line\">          completed: <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> todos</span><br><span class=\"line\">Component：</span><br><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; connect &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-redux'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; addTodo &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../actions'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> AddTodo = <span class=\"function\">(<span class=\"params\">&#123; dispatch &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> input</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;form onSubmit=&#123;e =&gt; &#123;</span><br><span class=\"line\">        e.preventDefault()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!input.value.trim()) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        dispatch(addTodo(input.value))</span><br><span class=\"line\">        input.value = <span class=\"string\">''</span></span><br><span class=\"line\">      &#125;&#125;&gt;</span><br><span class=\"line\">        &lt;input ref=&#123;node =&gt; &#123;</span><br><span class=\"line\">          input = node</span><br><span class=\"line\">        &#125;&#125; /&gt;</span><br><span class=\"line\">        &lt;button type=<span class=\"string\">\"submit\"</span>&gt;</span><br><span class=\"line\">          Add Todo</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>form&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  )</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">AddTodo = connect()(AddTodo)</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">export default AddTodo</span></span><br><span class=\"line\"><span class=\"regexp\">Store：</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">import React from 'react'</span></span><br><span class=\"line\"><span class=\"regexp\">import &#123; render &#125; from 'react-dom'</span></span><br><span class=\"line\"><span class=\"regexp\">import &#123; createStore &#125; from 'redux'</span></span><br><span class=\"line\"><span class=\"regexp\">import &#123; Provider &#125; from 'react-redux'</span></span><br><span class=\"line\"><span class=\"regexp\">import App from './</span>components/App<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">import reducer from '</span>./reducers<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">const store = createStore(reducer)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">render(</span></span><br><span class=\"line\"><span class=\"string\">  &lt;Provider store=&#123;store&#125;&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;App /&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/Provider&gt;,</span></span><br><span class=\"line\"><span class=\"string\">  document.getElementById('</span>root<span class=\"string\">')</span></span><br><span class=\"line\"><span class=\"string\">)</span></span><br><span class=\"line\"><span class=\"string\">上面示例就是一个简易的react-redux项目中的数据请求与处理，component发起dispatch(addinput.value))请求，reducers接收’ADD_TODO’返回一个新的state，store进行管理整个reducers和state将其结果渲染在页面当中。</span></span><br></pre></td></tr></table></div></figure>\n\n<h5 id=\"总结\">总结<a href=\"2019/03/16/React中的数据管理#总结\"></a></h5><p>Redux只是对于react的state进行了管理，对于react的props并没有进行管理。这也跟props本身的特性有关系，props本身就是只读属性，所以可控性比较强，不需要再次进行包装管理。</p>\n<h4 id=\"三、基于dva的react项目开发中的数据管理\">三、基于dva的react项目开发中的数据管理<a href=\"2019/03/16/React中的数据管理#三、基于dva的react项目开发中的数据管理\"></a></h4><p>dva是基于redux、redux-saga和react-router 2.x的轻量级前端框架。是使用React技术栈进行前端开发的脚手架。</p>\n<p>dva实际上并没有引入什么新的概念，唯一的特点就是简化了react和redux、redux-saga之间的数据交互。可以从下面的实例中做简要了解。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">models：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; getInputOutputProfiles,deleteInputOutputProfiles,addInputOutputProfiles &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"../../services/InputOutputManagement\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  namespace : <span class=\"string\">'input_output'</span>,</span><br><span class=\"line\">  state : &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">data:[],</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\">       &#125;,</span><br><span class=\"line\">  effects : &#123;</span><br><span class=\"line\">    *getInputOutputProfiles(&#123; payload &#125;, &#123; put, call, select &#125;) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> type_input=<span class=\"string\">'REMOTEFILESHARED_INPUT'</span>;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> type_output=<span class=\"string\">'REMOTEFILESHARED_OUTPUT'</span>;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> token = <span class=\"keyword\">yield</span> select(<span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.home.token);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> result_input = <span class=\"keyword\">yield</span> call(getInputOutputProfiles,&#123;<span class=\"attr\">payload</span>:&#123;token,<span class=\"attr\">type</span>:type_input&#125;&#125;);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> result_output = <span class=\"keyword\">yield</span> call(getInputOutputProfiles,&#123;<span class=\"attr\">payload</span>:&#123;token,<span class=\"attr\">type</span>:type_output&#125;&#125;);</span><br><span class=\"line\">      <span class=\"keyword\">let</span> data=[];</span><br><span class=\"line\">      result_input.remoteFileList.map(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">        data.unshift(value)</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      result_output.remoteFileList.map(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">        data.unshift(value)</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>:<span class=\"string\">'setData'</span>,<span class=\"attr\">payload</span>:&#123; <span class=\"attr\">data</span>: data &#125;&#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">      ...</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">  reducers : &#123;</span><br><span class=\"line\">      ...</span><br><span class=\"line\"></span><br><span class=\"line\">setData(state,&#123; <span class=\"attr\">payload</span>:&#123;data&#125; &#125;)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; ...state, <span class=\"attr\">data</span>:data &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">  subscriptions : &#123;</span><br><span class=\"line\">    setup(&#123;dispatch, history&#125;) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> history.listen(<span class=\"function\">(<span class=\"params\">&#123;pathname&#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pathname === <span class=\"string\">'/system/input_output'</span>) &#123;</span><br><span class=\"line\">          dispatch(&#123;</span><br><span class=\"line\">            type:<span class=\"string\">'getInputOutputProfiles'</span></span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">component：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SectionPanel</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span></span>&#123;</span><br><span class=\"line\"> ...</span><br><span class=\"line\"></span><br><span class=\"line\"> handleSubmit = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.props.dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'input_output/addInputOutputProfiles'</span>, <span class=\"attr\">payload</span>: &#123; <span class=\"attr\">id</span>:<span class=\"keyword\">this</span>.props.id, <span class=\"attr\">type</span>:<span class=\"keyword\">this</span>.props.type &#125;&#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"> ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> mapStateToProps = <span class=\"function\">(<span class=\"params\"> state </span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> state;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> connect(mapStateToProps)(SectionPanel);</span><br></pre></td></tr></table></div></figure>\n\n","prev":{"title":"webpack的基本使用","link":"2019/04/02/webpack的基本使用"},"next":{"title":"前端性能的优化","link":"2019/01/03/前端性能的优化"},"plink":"http://Li_junhui.github.io.git/2019/03/16/React中的数据管理/"}