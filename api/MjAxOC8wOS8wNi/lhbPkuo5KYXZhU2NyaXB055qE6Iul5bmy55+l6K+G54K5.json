{"title":"关于JavaScript的若干知识点","date":"2018-09-05T22:16:42.000Z","link":"2018/09/06/关于JavaScript的若干知识点","comments":true,"updated":"2019-08-31T10:24:38.963Z","content":"<pre><code>关于JavaScript的若干知识点</code></pre><h4 id=\"JavaScript-简介\">JavaScript 简介<a href=\"2018/09/06/关于JavaScript的若干知识点#JavaScript-简介\"></a></h4><p>JavaScript 是互联网上最流行的脚本语言，这门语言可用于 HTML 和 web，更可广泛用于服务器、PC、笔记本电脑、平板电脑和智能手机等设备。<br>JavaScript 是脚本语言<br>      1.JavaScript 是一种轻量级的编程语言。<br>      2.JavaScript 是可插入 HTML 页面的编程代码。<br>      3.JavaScript 插入 HTML 页面后，可由所有的现代浏览器执行。</p>\n<h4 id=\"JavaScript-数据类型\">JavaScript 数据类型<a href=\"2018/09/06/关于JavaScript的若干知识点#JavaScript-数据类型\"></a></h4><p>值类型(基本类型)：字符串（String）、数字(Number)、布尔(Boolean)、对空（Null）、未定义（Undefined）、Symbol。<br>引用数据类型：对象(Object)、数组(Array)、函数(Function)。<br>                         注：Symbol 是 ES6 引入了一种新的原始数据类型，表示独一无二的值。<br>JavaScript 拥有动态类型<br>JavaScript 拥有动态类型。这意味着相同的变量可用作不同的类型：</p>\n<p>实例<br>var x;               // x 为 undefined<br>var x = 5;           // 现在 x 为数字<br>var x = “John”;      // 现在 x 为字符串</p>\n<p>JavaScript 字符串<br>字符串是存储字符（比如 “Bill Gates”）的变量。</p>\n<p>字符串可以是引号中的任意文本。您可以使用单引号或双引号：</p>\n<p>实例<br>var carname=”Volvo XC60”;<br>var carname=’Volvo XC60’;<br>您可以在字符串中使用引号，只要不匹配包围字符串的引号即可：</p>\n<p>实例<br>var answer=”It’s alright”;<br>var answer=”He is called ‘Johnny’”;<br>var answer=’He is called “Johnny”‘;</p>\n<p>JavaScript 数字<br>JavaScript 只有一种数字类型。数字可以带小数点，也可以不带：</p>\n<p>实例<br>var x1=34.00;      //使用小数点来写<br>var x2=34;         //不使用小数点来写<br>极大或极小的数字可以通过科学（指数）计数法来书写：</p>\n<p>实例<br>var y=123e5;      // 12300000<br>var z=123e-5;     // 0.00123</p>\n<p>JavaScript 布尔<br>布尔（逻辑）只能有两个值：true 或 false。</p>\n<p>var x=true;<br>var y=false;<br>布尔常用在条件测试中。</p>\n<h4 id=\"JavaScript-数组\">JavaScript 数组<a href=\"2018/09/06/关于JavaScript的若干知识点#JavaScript-数组\"></a></h4><p>下面的代码创建名为 cars 的数组：</p>\n<p>var cars=new Array();<br>cars[0]=”Saab”;<br>cars[1]=”Volvo”;<br>cars[2]=”BMW”;<br>或者 (condensed array):</p>\n<p>var cars=new Array(“Saab”,”Volvo”,”BMW”);<br>或者 (literal array):</p>\n<p>实例<br>var cars=[“Saab”,”Volvo”,”BMW”];</p>\n<p>尝试一下 »<br>数组下标是基于零的，所以第一个项目是 [0]，第二个是 [1]，以此类推。</p>\n<h4 id=\"JavaScript-对象\">JavaScript 对象<a href=\"2018/09/06/关于JavaScript的若干知识点#JavaScript-对象\"></a></h4><p>对象由花括号分隔。在括号内部，对象的属性以名称和值对的形式 (name : value) 来定义。属性由逗号分隔：</p>\n<p>var person={firstname:”John”, lastname:”Doe”, id:5566};<br>上面例子中的对象 (person) 有三个属性：firstname、lastname 以及 id。</p>\n<p>空格和折行无关紧要。声明可横跨多行：</p>\n<p>var person={<br>firstname : “John”,<br>lastname  : “Doe”,<br>id        :  5566<br>};<br>对象属性有两种寻址方式：</p>\n<p>实例<br>name=person.lastname;<br>name=person[“lastname”];</p>\n<p>Undefined 和 Null<br>Undefined 这个值表示变量不含有值。</p>\n<p>可以通过将变量的值设置为 null 来清空变量。</p>\n<p>实例<br>cars=null;<br>person=null;</p>\n<p>尝试一下 »</p>\n<p>声明变量类型</p>\n<p>当您声明新变量时，可以使用关键词 “new” 来声明其类型：</p>\n<p>var carname=new String;<br>var x=      new Number;<br>var y=      new Boolean;<br>var cars=   new Array;<br>var person= new Object;</p>\n<p>lamp    JavaScript 变量均为对象。当您声明一个变量时，就创建了一个新的对象。</p>\n<h4 id=\"JavaScript-对象-1\">JavaScript 对象<a href=\"2018/09/06/关于JavaScript的若干知识点#JavaScript-对象-1\"></a></h4><p>JavaScript 对象是拥有属性和方法的数据。</p>\n<p>真实生活中的对象，属性和方法<br>真实生活中，一辆汽车是一个对象。</p>\n<p>对象有它的属性，如重量和颜色等，方法有启动停止等:</p>\n<p>对象    属性    方法<br>car.name = Fiat</p>\n<p>car.model = 500</p>\n<p>car.weight = 850kg                       </p>\n<p>car.color = white<br>car.start()</p>\n<p>car.drive()</p>\n<p>car.brake() </p>\n<p>car.stop()</p>\n<p>所有汽车都有这些属性，但是每款车的属性都不尽相同。</p>\n<p>所有汽车都拥有这些方法，但是它们被执行的时间都不尽相同。</p>\n<p>JavaScript 对象<br>在 JavaScript中，几乎所有的事物都是对象。</p>\n<p>Note    在 JavaScript 中，对象是非常重要的，当你理解了对象，就可以了解 JavaScript 。<br>你已经学习了 JavaScript 变量的赋值。</p>\n<p>以下代码为变量 car 设置值为 “Fiat” :</p>\n<p>var car = “Fiat”;<br>对象也是一个变量，但对象可以包含多个值（多个变量）。</p>\n<p>var car = {type:”Fiat”, model:500, color:”white”};<br>在以上实例中，3 个值 (“Fiat”, 500, “white”) 赋予变量 car。</p>\n<p>在以上实例中，3 个变量 (type, model, color) 赋予变量 car。</p>\n<p>Note    JavaScript 对象是变量的容器。<br>对象定义<br>你可以使用字符来定义和创建 JavaScript 对象:</p>\n<p>实例<br>var person = {firstName:”John”, lastName:”Doe”, age:50, eyeColor:”blue”};</p>\n<p>尝试一下 »<br>定义 JavaScript 对象可以跨越多行，空格跟换行不是必须的：</p>\n<p>实例<br>var person = {<br>    firstName:”John”,<br>    lastName:”Doe”,<br>    age:50,<br>    eyeColor:”blue”<br>};</p>\n<p>尝试一下 »</p>\n<h4 id=\"对象属性\">对象属性<a href=\"2018/09/06/关于JavaScript的若干知识点#对象属性\"></a></h4><p>可以说 “JavaScript 对象是变量的容器”。</p>\n<p>但是，我们通常认为 “JavaScript 对象是键值对的容器”。</p>\n<p>键值对通常写法为 name : value (键与值以冒号分割)。</p>\n<p>键值对在 JavaScript 对象通常称为 对象属性。</p>\n<p>Note    JavaScript 对象是属性变量的容器。<br>对象键值对的写法类似于：</p>\n<p>PHP 中的关联数组<br>Python 中的字典<br>C 语言中的哈希表<br>Java 中的哈希映射<br>Ruby 和 Perl 中的哈希表<br>访问对象属性<br>你可以通过两种方式访问对象属性:</p>\n<p>实例 1<br>person.lastName;</p>\n<p>实例 2<br>person[“lastName”];</p>\n<p>对象方法<br>对象的方法定义了一个函数，并作为对象的属性存储。</p>\n<p>对象方法通过添加 () 调用 (作为一个函数)。</p>\n<p>该实例访问了 person 对象的 fullName() 方法:</p>\n<p>实例<br>name = person.fullName();</p>\n<p>尝试一下 »<br>如果你要访问 person 对象的 fullName 属性，它将作为一个定义函数的字符串返回：</p>\n<p>实例<br>name = person.fullName;</p>\n<p>在调用函数时，您可以向其传递值，这些值被称为参数。</p>\n<p>这些参数可以在函数中使用。</p>\n<p>您可以发送任意多的参数，由逗号 (,) 分隔：</p>\n<p>myFunction(<em>argument1,argument2</em>)</p>\n<p>当您声明函数时，请把参数作为变量来声明：</p>\n<p>function myFunction(<em>var1</em>,<em>var2</em>)<br>{<br><em>代码</em><br>}</p>\n<p>变量和参数必须以一致的顺序出现。第一个变量就是第一个被传递的参数的给定的值，以此类推。</p>\n<p>带有返回值的函数<br>有时，我们会希望函数将值返回调用它的地方。</p>\n<p>通过使用 return 语句就可以实现。</p>\n<p>在使用 return 语句时，函数会停止执行，并返回指定的值。</p>\n<p>语法<br>function myFunction()<br>{<br>    var x=5;<br>    return x;<br>}<br>上面的函数会返回值 5。</p>\n<p>注意： 整个 JavaScript 并不会停止执行，仅仅是函数。JavaScript 将继续执行代码，从调用函数的地方。</p>\n<p>函数调用将被返回值取代：</p>\n<p>var myVar=myFunction();<br>myVar 变量的值是 5，也就是函数 “myFunction()” 所返回的值。</p>\n<p>即使不把它保存为变量，您也可以使用返回值：</p>\n<p>document.getElementById(“demo”).innerHTML=myFunction();<br>“demo” 元素的 innerHTML 将成为 5，也就是函数 “myFunction()” 所返回的值。</p>\n<p>您可以使返回值基于传递到函数中的参数：</p>\n<p>实例<br>计算两个数字的乘积，并返回结果：</p>\n<p>function myFunction(a,b)<br>{<br>    return a*b;<br>}</p>\n<p>document.getElementById(“demo”).innerHTML=myFunction(4,3);<br>“demo” 元素的 innerHTML 将是：</p>\n<p>12</p>\n<p>尝试一下 »<br>在您仅仅希望退出函数时 ，也可使用 return 语句。返回值是可选的：</p>\n<p>function myFunction(a,b)<br>{<br>    if (a&gt;b)<br>    {<br>        return;<br>    }<br>    x=a+b<br>}<br>如果 a 大于 b，则上面的代码将退出函数，并不会计算 a 和 b 的总和。</p>\n<p>局部 JavaScript 变量<br>在 JavaScript 函数内部声明的变量（使用 var）是局部变量，所以只能在函数内部访问它。（该变量的作用域是局部的）。</p>\n<p>您可以在不同的函数中使用名称相同的局部变量，因为只有声明过该变量的函数才能识别出该变量。</p>\n<p>只要函数运行完毕，本地变量就会被删除。</p>\n<p>全局 JavaScript 变量<br>在函数外声明的变量是全局变量，网页上的所有脚本和函数都能访问它。</p>\n<p>JavaScript 变量的生存期<br>JavaScript 变量的生命期从它们被声明的时间开始。</p>\n<p>局部变量会在函数运行以后被删除。</p>\n<p>全局变量会在页面关闭后被删除。</p>\n<p>向未声明的 JavaScript 变量分配值<br>如果您把值赋给尚未声明的变量，该变量将被自动作为 window 的一个属性。</p>\n<p>这条语句：</p>\n<p>carname=”Volvo”;<br>将声明 window 的一个属性 carname。</p>\n<p>非严格模式下给未声明变量赋值创建的全局变量，是全局对象的可配置属性，可以删除。</p>\n<p>var var1 = 1; // 不可配置全局属性<br>var2 = 2; // 没有使用 var 声明，可配置全局属性</p>\n<p>console.log(this.var1); // 1<br>console.log(window.var1); // 1</p>\n<p>delete var1; // false 无法删除<br>console.log(var1); //1</p>\n<p>delete var2;<br>console.log(delete var2); // true<br>console.log(var2); // 已经删除 报错变量未定义</p>\n<h4 id=\"JavaScript-作用域\">JavaScript 作用域<a href=\"2018/09/06/关于JavaScript的若干知识点#JavaScript-作用域\"></a></h4><p>作用域是可访问变量的集合。</p>\n<p>JavaScript 作用域<br>在 JavaScript 中, 对象和函数同样也是变量。</p>\n<p>在 JavaScript 中, 作用域为可访问变量，对象，函数的集合。</p>\n<p>JavaScript 函数作用域: 作用域在函数内修改。</p>\n<h4 id=\"JavaScript-局部作用域\">JavaScript 局部作用域<a href=\"2018/09/06/关于JavaScript的若干知识点#JavaScript-局部作用域\"></a></h4><p>变量在函数内声明，变量为局部作用域。</p>\n<p>局部变量：只能在函数内部访问。</p>\n<p>实例<br>// 此处不能调用 carName 变量<br>function myFunction() {<br>    var carName = “Volvo”;<br>    // 函数内可调用 carName 变量<br>}</p>\n<p>尝试一下 »<br>因为局部变量只作用于函数内，所以不同的函数可以使用相同名称的变量。</p>\n<p>局部变量在函数开始执行时创建，函数执行完后局部变量会自动销毁。</p>\n<p>JavaScript 全局变量<br>变量在函数外定义，即为全局变量。</p>\n<p>全局变量有 全局作用域: 网页中所有脚本和函数均可使用。 </p>\n<p>实例<br>var carName = “ Volvo”;</p>\n<p>// 此处可调用 carName 变量<br>function myFunction() {<br>    // 函数内可调用 carName 变量<br>}</p>\n<p>尝试一下 »</p>\n<p>如果变量在函数内没有声明（没有使用 var 关键字），该变量为全局变量。</p>\n<p>以下实例中 carName 在函数内，但是为全局变量。</p>\n<p>实例<br>// 此处可调用 carName 变量</p>\n<p>function myFunction() {<br>    carName = “Volvo”;<br>    // 此处可调用 carName 变量<br>}</p>\n<p>尝试一下 »</p>\n<p>JavaScript 变量生命周期<br>JavaScript 变量生命周期在它声明时初始化。</p>\n<p>局部变量在函数执行完毕后销毁。</p>\n<p>全局变量在页面关闭后销毁。</p>\n<p>函数参数</p>\n<p>函数参数只在函数内起作用，是局部变量。</p>\n<p>HTML 中的全局变量<br>在 HTML 中, 全局变量是 window 对象: 所有数据变量都属于 window 对象。</p>\n<p>实例<br>//此处可使用 window.carName</p>\n<p>function myFunction() {<br>    carName = “Volvo”;<br>}</p>\n<h4 id=\"JavaScript-事件\">JavaScript 事件<a href=\"2018/09/06/关于JavaScript的若干知识点#JavaScript-事件\"></a></h4><p>HTML 事件是发生在 HTML 元素上的事情。</p>\n<p>当在 HTML 页面中使用 JavaScript 时， JavaScript 可以触发这些事件。</p>\n<p>HTML 事件<br>HTML 事件可以是浏览器行为，也可以是用户行为。</p>\n<p>以下是 HTML 事件的实例：</p>\n<p>HTML 页面完成加载<br>HTML input 字段改变时<br>HTML 按钮被点击<br>通常，当事件发生时，你可以做些事情。</p>\n<p>在事件触发时 JavaScript 可以执行一些代码。</p>\n<p>HTML 元素中可以添加事件属性，使用 JavaScript 代码来添加 HTML 元素。</p>\n<p>单引号:</p>\n<some-html-element some-event=\"JavaScript 代码\">\n双引号:\n\n<some-html-element some-event=\"JavaScript 代码\">\n在以下实例中，按钮元素中添加了 onclick 属性 (并加上代码):\n\n<p>实例<br><button onclick=\"getElementById('demo').innerHTML=Date()\">现在的时间是?</button></p>\n<p>尝试一下 »<br>以上实例中，JavaScript 代码将修改 id=”demo” 元素的内容。</p>\n<p>在下一个实例中，代码将修改自身元素的内容 (使用 this.innerHTML):</p>\n<p>实例<br><button onclick=\"this.innerHTML=Date()\">现在的时间是?</button></p>\n<p>尝试一下 »</p>\n<p>Note    JavaScript代码通常是几行代码。比较常见的是通过事件属性来调用：</p>\n<p>实例<br><button onclick=\"displayDate()\">现在的时间是?</button></p>\n<p>尝试一下 »</p>\n<p>常见的HTML事件<br>下面是一些常见的HTML事件的列表:</p>\n<p>事件    描述<br>onchange    HTML 元素改变<br>onclick    用户点击 HTML 元素<br>onmouseover    用户在一个HTML元素上移动鼠标<br>onmouseout    用户从一个HTML元素上移开鼠标<br>onkeydown    用户按下键盘按键<br>onload    浏览器已完成页面的加载</p>\n<p>JavaScript 可以做什么?</p>\n<p>事件可以用于处理表单验证，用户输入，用户行为及浏览器动作:</p>\n<p>页面加载时触发事件<br>页面关闭时触发事件<br>用户点击按钮执行动作<br>验证用户输入内容的合法性<br>等等 …<br>可以使用多种方法来执行 JavaScript 事件代码：</p>\n<p>HTML 事件属性可以直接执行 JavaScript 代码<br>HTML 事件属性可以调用 JavaScript 函数<br>你可以为 HTML 元素指定自己的事件处理程序<br>你可以阻止事件的发生。</p>\n<p>JavaScript 类型转换</p>\n<p>Number() 转换为数字， String() 转换为字符串， Boolean() 转化为布尔值。</p>\n<p>JavaScript 数据类型<br>在 JavaScript 中有 5 种不同的数据类型：</p>\n<p>string<br>number<br>boolean<br>object<br>function<br>3 种对象类型：</p>\n<p>Object<br>Date<br>Array<br>2 个不包含任何值的数据类型：</p>\n<p>null<br>undefined<br>typeof 操作符<br>你可以使用 typeof 操作符来查看 JavaScript 变量的数据类型。</p>\n<p>实例<br>typeof “John”                 // 返回 string<br>typeof 3.14                   // 返回 number<br>typeof NaN                    // 返回 number<br>typeof false                  // 返回 boolean<br>typeof [1,2,3,4]              // 返回 object<br>typeof {name:’John’, age:34}  // 返回 object<br>typeof new Date()             // 返回 object<br>typeof function () {}         // 返回 function<br>typeof myCar                  // 返回 undefined (如果 myCar 没有声明)<br>typeof null                   // 返回 object</p>\n<p>尝试一下 »<br>请注意：</p>\n<p>NaN 的数据类型是 number<br>数组(Array)的数据类型是 object<br>日期(Date)的数据类型为 object<br>null 的数据类型是 object<br>未定义变量的数据类型为 undefined<br>如果对象是 JavaScript Array 或 JavaScript Date ，我们就无法通过 typeof 来判断他们的类型，因为都是 返回 object。</p>\n<p>constructor 属性<br>constructor 属性返回所有 JavaScript 变量的构造函数。</p>\n<p>实例<br>“John”.constructor                 // 返回函数 String()  { [native code] }<br>(3.14).constructor                 // 返回函数 Number()  { [native code] }<br>false.constructor                  // 返回函数 Boolean() { [native code] }<br>[1,2,3,4].constructor              // 返回函数 Array()   { [native code] }<br>{name:’John’, age:34}.constructor  // 返回函数 Object()  { [native code] }<br>new Date().constructor             // 返回函数 Date()    { [native code] }<br>function () {}.constructor         // 返回函数 Function(){ [native code] }</p>\n<p>尝试一下 »<br>你可以使用 constructor 属性来查看对象是否为数组 (包含字符串 “Array”):</p>\n<p>实例<br>function isArray(myArray) {<br>    return myArray.constructor.toString().indexOf(“Array”) &gt; -1;<br>}</p>\n<p>尝试一下 »<br>你可以使用 constructor 属性来查看对象是否为日期 (包含字符串 “Date”):</p>\n<p>实例<br>function isDate(myDate) {<br>    return myDate.constructor.toString().indexOf(“Date”) &gt; -1;<br>}</p>\n<p>尝试一下 »</p>\n<p>JavaScript 类型转换<br>JavaScript 变量可以转换为新变量或其他数据类型：</p>\n<p>通过使用 JavaScript 函数<br>通过 JavaScript 自身自动转换<br>将数字转换为字符串<br>全局方法 String() 可以将数字转换为字符串。</p>\n<p>该方法可用于任何类型的数字，字母，变量，表达式：</p>\n<p>实例<br>String(x)         // 将变量 x 转换为字符串并返回<br>String(123)       // 将数字 123 转换为字符串并返回<br>String(100 + 23)  // 将数字表达式转换为字符串并返回</p>\n<p>尝试一下 »<br>Number 方法 toString() 也是有同样的效果。</p>\n<p>实例<br>x.toString()<br>(123).toString()<br>(100 + 23).toString()</p>\n<p>尝试一下 »<br>在 Number 方法 章节中，你可以找到更多数字转换为字符串的方法：</p>\n<p>方法    描述<br>toExponential()    把对象的值转换为指数计数法。<br>toFixed()    把数字转换为字符串，结果的小数点后有指定位数的数字。<br>toPrecision()    把数字格式化为指定的长度。</p>\n<p>将布尔值转换为字符串<br>全局方法 String() 可以将布尔值转换为字符串。</p>\n<p>String(false)        // 返回 “false”<br>String(true)         // 返回 “true”<br>Boolean 方法 toString() 也有相同的效果。</p>\n<p>false.toString()     // 返回 “false”<br>true.toString()      // 返回 “true”</p>\n<p>将日期转换为字符串<br>Date() 返回字符串。</p>\n<p>Date()      // 返回 Thu Jul 17 2014 15:38:19 GMT+0200 (W. Europe Daylight Time)<br>全局方法 String() 可以将日期对象转换为字符串。</p>\n<p>String(new Date())      // 返回 Thu Jul 17 2014 15:38:19 GMT+0200 (W. Europe Daylight Time)<br>Date 方法 toString() 也有相同的效果。</p>\n<p>实例<br>obj = new Date()<br>obj.toString()   // 返回 Thu Jul 17 2014 15:38:19 GMT+0200 (W. Europe Daylight Time)<br>在 Date 方法 章节中，你可以查看更多关于日期转换为字符串的函数：</p>\n<p>方法    描述<br>getDate()    从 Date 对象返回一个月中的某一天 (1 ~ 31)。<br>getDay()    从 Date 对象返回一周中的某一天 (0 ~ 6)。<br>getFullYear()    从 Date 对象以四位数字返回年份。<br>getHours()    返回 Date 对象的小时 (0 ~ 23)。<br>getMilliseconds()    返回 Date 对象的毫秒(0 ~ 999)。<br>getMinutes()    返回 Date 对象的分钟 (0 ~ 59)。<br>getMonth()    从 Date 对象返回月份 (0 ~ 11)。<br>getSeconds()    返回 Date 对象的秒数 (0 ~ 59)。<br>getTime()    返回 1970 年 1 月 1 日至今的毫秒数。</p>\n<h4 id=\"将字符串转换为数字\"><a href=\"2018/09/06/关于JavaScript的若干知识点#将字符串转换为数字\" class=\"headerlink\" title=\"将字符串转换为数字\"></a>将字符串转换为数字</h4><p>全局方法 Number() 可以将字符串转换为数字。</p>\n<p>字符串包含数字(如 “3.14”) 转换为数字 (如 3.14).</p>\n<p>空字符串转换为 0。</p>\n<p>其他的字符串会转换为 NaN (不是个数字)。</p>\n<p>Number(“3.14”)    // 返回 3.14<br>Number(“ “)       // 返回 0<br>Number(“”)        // 返回 0<br>Number(“99 88”)   // 返回 NaN<br>在 Number 方法 章节中，你可以查看到更多关于字符串转为数字的方法：</p>\n<p>方法    描述<br>parseFloat()    解析一个字符串，并返回一个浮点数。<br>parseInt()    解析一个字符串，并返回一个整数。</p>\n<p>一元运算符 +<br>Operator + 可用于将变量转换为数字：</p>\n<p>实例<br>var y = “5”;      // y 是一个字符串<br>var x = + y;      // x 是一个数字</p>\n<p>尝试一下 »<br>如果变量不能转换，它仍然会是一个数字，但值为 NaN (不是一个数字):</p>\n<p>实例<br>var y = “John”;   // y 是一个字符串<br>var x = + y;      // x 是一个数字 (NaN)</p>\n<p>尝试一下 »</p>\n<p>将布尔值转换为数字<br>全局方法 Number() 可将布尔值转换为数字。</p>\n<p>Number(false)     // 返回 0<br>Number(true)      // 返回 1</p>\n<p>将日期转换为数字<br>全局方法 Number() 可将日期转换为数字。</p>\n<p>d = new Date();<br>Number(d)          // 返回 1404568027739<br>日期方法 getTime() 也有相同的效果。</p>\n<p>d = new Date();<br>d.getTime()        // 返回 1404568027739</p>\n<p>自动转换类型<br>当 JavaScript 尝试操作一个 “错误” 的数据类型时，会自动转换为 “正确” 的数据类型。</p>\n<p>以下输出结果不是你所期望的：</p>\n<p>5 + null    // 返回 5         null 转换为 0<br>“5” + null  // 返回”5null”   null 转换为 “null”<br>“5” + 1     // 返回 “51”      1 转换为 “1”<br>“5” - 1     // 返回 4         “5” 转换为 5</p>\n<p>自动转换为字符串<br>当你尝试输出一个对象或一个变量时 JavaScript 会自动调用变量的 toString() 方法：</p>\n<p>document.getElementById(“demo”).innerHTML = myVar;</p>\n<p>myVar = {name:”Fjohn”}  // toString 转换为 “[object Object]”<br>myVar = [1,2,3,4]       // toString 转换为 “1,2,3,4”<br>myVar = new Date()      // toString 转换为 “Fri Jul 18 2014 09:08:55 GMT+0200”<br>数字和布尔值也经常相互转换：</p>\n<p>myVar = 123             // toString 转换为 “123”<br>myVar = true            // toString 转换为 “true”<br>myVar = false           // toString 转换为 “false”<br>下表展示了使用不同的数值转换为数字(Number), 字符串(String), 布尔值(Boolean):</p>\n<p>JavaScript 正则表达式<br>正则表达式（英语：Regular Expression，在代码中常简写为regex、regexp或RE）使用单个字符串来描述、匹配一系列符合某个句法规则的字符串搜索模式。</p>\n<p>搜索模式可用于文本搜索和文本替换。</p>\n<h4 id=\"什么是正则表达式？\"><a href=\"2018/09/06/关于JavaScript的若干知识点#什么是正则表达式？\" class=\"headerlink\" title=\"什么是正则表达式？\"></a>什么是正则表达式？</h4><p>正则表达式是由一个字符序列形成的搜索模式。</p>\n<p>当你在文本中搜索数据时，你可以用搜索模式来描述你要查询的内容。</p>\n<p>正则表达式可以是一个简单的字符，或一个更复杂的模式。</p>\n<p>正则表达式可用于所有文本搜索和文本替换的操作。</p>\n<p>语法<br>/正则表达式主体/修饰符(可选)<br>其中修饰符是可选的。</p>\n<p>实例：<br>var patt = /runoob/i<br>实例解析：</p>\n<p>/runoob/i  是一个正则表达式。</p>\n<p>runoob  是一个正则表达式主体 (用于检索)。</p>\n<p>i  是一个修饰符 (搜索不区分大小写)。</p>\n<p>使用字符串方法<br>在 JavaScript 中，正则表达式通常用于两个字符串方法 : search() 和 replace()。</p>\n<p>search() 方法 用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串，并返回子串的起始位置。</p>\n<p>replace() 方法 用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。</p>\n<p>search() 方法使用正则表达式<br>实例<br>使用正则表达式搜索 “Runoob” 字符串，且不区分大小写：</p>\n<p>var str = “Visit Runoob!”;<br>var n = str.search(/Runoob/i);<br>输出结果为：</p>\n<p>6</p>\n<p>尝试一下 »</p>\n<p>search() 方法使用字符串<br>search 方法可使用字符串作为参数。字符串参数会转换为正则表达式：</p>\n<p>实例<br>检索字符串中 “Runoob” 的子串：</p>\n<p>var str = “Visit Runoob!”;<br>var n = str.search(“Runoob”);</p>\n<p>尝试一下 »</p>\n<p>replace() 方法使用正则表达式<br>实例<br>使用正则表达式且不区分大小写将字符串中的 Microsoft 替换为 Runoob :</p>\n<p>var str = document.getElementById(“demo”).innerHTML;<br>var txt = str.replace(/microsoft/i,”Runoob”);<br>结果输出为:</p>\n<p>Visit Runoob!</p>\n<p>尝试一下 »</p>\n<p>replace() 方法使用字符串<br>replace() 方法将接收字符串作为参数：</p>\n<p>var str = document.getElementById(“demo”).innerHTML;<br>var txt = str.replace(“Microsoft”,”Runoob”);</p>\n<p>尝试一下 »</p>\n<p>你注意到了吗？</p>\n<p>Note    正则表达式参数可用在以上方法中 (替代字符串参数)。<br>正则表达式使得搜索功能更加强大(如实例中不区分大小写)。</p>\n<p>正则表达式修饰符<br>修饰符 可以在全局搜索中不区分大小写:</p>\n<p>修饰符    描述<br>i    执行对大小写不敏感的匹配。<br>g    执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。<br>m    执行多行匹配。</p>\n<p>正则表达式模式<br>方括号用于查找某个范围内的字符：</p>\n<p>表达式    描述<br>[abc]    查找方括号之间的任何字符。<br>[0-9]    查找任何从 0 至 9 的数字。<br>(x|y)    查找任何以 | 分隔的选项。<br>元字符是拥有特殊含义的字符：</p>\n<p>元字符    描述<br>\\d    查找数字。<br>\\s    查找空白字符。<br>\\b    匹配单词边界。<br>\\uxxxx    查找以十六进制数 xxxx 规定的 Unicode 字符。<br>量词:</p>\n<p>量词    描述<br>n+    匹配任何包含至少一个 n 的字符串。<br>n*    匹配任何包含零个或多个 n 的字符串。<br>n?    匹配任何包含零个或一个 n 的字符串。</p>\n<p>使用 RegExp 对象<br>在 JavaScript 中，RegExp 对象是一个预定义了属性和方法的正则表达式对象。</p>\n<p>使用 test()<br>test() 方法是一个正则表达式方法。</p>\n<p>test() 方法用于检测一个字符串是否匹配某个模式，如果字符串中含有匹配的文本，则返回 true，否则返回 false。</p>\n<p>以下实例用于搜索字符串中的字符 “e”：</p>\n<p>实例<br>var patt = /e/;<br>patt.test(“The best things in life are free!”);<br>字符串中含有 “e”，所以该实例输出为：</p>\n<p>true</p>\n<p>尝试一下 »<br>你可以不用设置正则表达式的变量，以上两行代码可以合并为一行：</p>\n<p>/e/.test(“The best things in life are free!”)</p>\n<p>使用 exec()<br>exec() 方法是一个正则表达式方法。</p>\n<p>exec() 方法用于检索字符串中的正则表达式的匹配。</p>\n<p>该函数返回一个数组，其中存放匹配的结果。如果未找到匹配，则返回值为 null。</p>\n<p>JavaScript 函数定义<br>JavaScript 使用关键字 function 定义函数。</p>\n<p>函数可以通过声明定义，也可以是一个表达式。</p>\n<h4 id=\"函数声明\"><a href=\"2018/09/06/关于JavaScript的若干知识点#函数声明\" class=\"headerlink\" title=\"函数声明\"></a>函数声明</h4><p>function functionName(parameters) {<br>  执行的代码<br>}<br>函数声明后不会立即执行，会在我们需要的时候调用到。</p>\n<p>实例<br>function myFunction(a, b) {<br>    return a * b;<br>}</p>\n<p>尝试一下 »</p>\n<p>Note    分号是用来分隔可执行JavaScript语句。<br>由于函数声明不是一个可执行语句，所以不以分号结束。</p>\n<p>函数表达式<br>JavaScript 函数可以通过一个表达式定义。</p>\n<p>函数表达式可以存储在变量中：</p>\n<p>实例<br>var x = function (a, b) {return a * b};</p>\n<p>尝试一下 »<br>在函数表达式存储在变量后，变量也可作为一个函数使用：</p>\n<p>实例<br>var x = function (a, b) {return a * b};<br>var z = x(4, 3);</p>\n<p>尝试一下 »<br>以上函数实际上是一个 匿名函数 (函数没有名称)。</p>\n<p>函数存储在变量中，不需要函数名称，通常通过变量名来调用。</p>\n<p>Note    上述函数以分号结尾，因为它是一个执行语句。</p>\n<p>Function() 构造函数<br>在以上实例中，我们了解到函数通过关键字 function 定义。</p>\n<p>函数同样可以通过内置的 JavaScript 函数构造器（Function()）定义。</p>\n<p>实例<br>var myFunction = new Function(“a”, “b”, “return a * b”);</p>\n<p>var x = myFunction(4, 3);</p>\n<p>尝试一下 »<br>实际上，你不必使用构造函数。上面实例可以写成：</p>\n<p>实例<br>var myFunction = function (a, b) {return a * b}</p>\n<p>var x = myFunction(4, 3);</p>\n<p>尝试一下 »</p>\n<p>Note    在 JavaScript 中，很多时候，你需要避免使用 new 关键字。</p>\n<h4 id=\"函数提升（Hoisting）\"><a href=\"2018/09/06/关于JavaScript的若干知识点#函数提升（Hoisting）\" class=\"headerlink\" title=\"函数提升（Hoisting）\"></a>函数提升（Hoisting）</h4><p>提升（Hoisting）是 JavaScript 默认将当前作用域提升到前面去的的行为。</p>\n<p>提升（Hoisting）应用在变量的声明与函数的声明。</p>\n<p>因此，函数可以在声明之前调用：</p>\n<p>myFunction(5);</p>\n<p>function myFunction(y) {<br>    return y * y;<br>}<br>使用表达式定义函数时无法提升。</p>\n<p>自调用函数<br>函数表达式可以 “自调用”。</p>\n<p>自调用表达式会自动调用。</p>\n<p>如果表达式后面紧跟 () ，则会自动调用。</p>\n<p>不能自调用声明的函数。</p>\n<p>通过添加括号，来说明它是一个函数表达式：</p>\n<p>实例<br>(function () {<br>    var x = “Hello!!”;      // 我将调用自己<br>})();</p>\n<p>尝试一下 »<br>以上函数实际上是一个 匿名自我调用的函数 (没有函数名)。</p>\n<p>函数可作为一个值使用<br>JavaScript 函数作为一个值使用：</p>\n<p>实例<br>function myFunction(a, b) {<br>    return a * b;<br>}</p>\n<p>var x = myFunction(4, 3);</p>\n<p>尝试一下 »<br>JavaScript 函数可作为表达式使用：</p>\n<p>实例<br>function myFunction(a, b) {<br>    return a * b;<br>}</p>\n<p>var x = myFunction(4, 3) * 2;</p>\n<p>尝试一下 »</p>\n<h4 id=\"函数是对象\"><a href=\"2018/09/06/关于JavaScript的若干知识点#函数是对象\" class=\"headerlink\" title=\"函数是对象\"></a>函数是对象</h4><p>在 JavaScript 中使用 typeof 操作符判断函数类型将返回 “function” 。</p>\n<p>但是JavaScript 函数描述为一个对象更加准确。</p>\n<p>JavaScript 函数有 属性 和 方法。</p>\n<p>arguments.length 属性返回函数调用过程接收到的参数个数：</p>\n<p>实例<br>function myFunction(a, b) {<br>    return arguments.length;<br>}</p>\n<p>尝试一下 »<br>toString() 方法将函数作为一个字符串返回:</p>\n<p>实例<br>function myFunction(a, b) {<br>    return a * b;<br>}</p>\n<p>var txt = myFunction.toString();</p>\n<p>尝试一下 »</p>\n<p>Note    函数定义作为对象的属性，称之为对象方法。<br>函数如果用于创建新的对象，称之为对象的构造函数。<br>箭头函数<br>ES6 新增了箭头函数。</p>\n<p>箭头函数表达式的语法比普通函数表达式更简洁。</p>\n<p>(参数1, 参数2, …, 参数N) =&gt; { 函数声明 }</p>\n<p>(参数1, 参数2, …, 参数N) =&gt; 表达式(单一)<br>// 相当于：(参数1, 参数2, …, 参数N) =&gt;{ return 表达式; }<br>当只有一个参数时，圆括号是可选的：</p>\n<p>(单一参数) =&gt; {函数声明}<br>单一参数 =&gt; {函数声明}<br>没有参数的函数应该写成一对圆括号:</p>\n<p>() =&gt; {函数声明}<br>实例<br>// ES5<br>var x = function(x, y) {<br>     return x * y;<br>}</p>\n<p>// ES6<br>const x = (x, y) =&gt; x * y;</p>\n<p>尝试一下 »<br>有的箭头函数都没有自己的 this。 不适合顶一个 对象的方法。</p>\n<p>当我们使用箭头函数的时候，箭头函数会默认帮我们绑定外层 this 的值，所以在箭头函数中 this 的值和外层的 this 是一样的。</p>\n<p>箭头函数是不能提升的，所以需要在使用之前定义。</p>\n<p>使用 const 比使用 var 更安全，因为函数表达式始终是一个常量。</p>\n<p>如果函数部分只是一个语句，则可以省略 return 关键字和大括号 {}，这样做是一个比较好的习惯:</p>\n<p>实例<br>const x = (x, y) =&gt; { return x * y };</p>\n<p>JavaScript 函数参数<br>JavaScript 函数对参数的值没有进行任何的检查。</p>\n<p>函数显式参数(Parameters)与隐式参数(Arguments)<br>在先前的教程中，我们已经学习了函数的显式参数:</p>\n<p>functionName(parameter1, parameter2, parameter3) {<br>    // 要执行的代码……<br>}<br>函数显式参数在函数定义时列出。</p>\n<p>函数隐式参数在函数调用时传递给函数真正的值。</p>\n<p>参数规则<br>JavaScript 函数定义显式参数时没有指定数据类型。</p>\n<p>JavaScript 函数对隐式参数没有进行类型检测。</p>\n<p>JavaScript 函数对隐式参数的个数没有进行检测。</p>\n<p>默认参数<br>ES5 中如果函数在调用时未提供隐式参数，参数会默认设置为： undefined</p>\n<p>有时这是可以接受的，但是建议最好为参数设置一个默认值：</p>\n<p>实例(ES5)<br>function myFunction(x, y) {<br>    if (y === undefined) {<br>          y = 0;<br>    }<br>}</p>\n<p>尝试一下 »<br>或者，更简单的方式：</p>\n<p>实例(ES5)<br>function myFunction(x, y) {<br>    y = y || 0;<br>}</p>\n<p>尝试一下 »<br>Note    如果y已经定义 ， y || 返回 y, 因为 y 是 true, 否则返回 0, 因为 undefined 为 false。<br>如果函数调用时设置了过多的参数，参数将无法被引用，因为无法找到对应的参数名。 只能使用 arguments 对象来调用。</p>\n<p>ES6 函数可以自带参数<br>ES6 支持函数带有默认参数，就判断 undefined 和 || 的操作：</p>\n<p>实例（ES6）<br>function myFunction(x, y = 10) {<br>    // y is 10 if not passed or undefined<br>    return x + y;<br>}</p>\n<p>myFunction(0, 2) // 输出 2<br>myFunction(5); // 输出 15, y 参数的默认值</p>\n<p>尝试一下 »<br>Arguments 对象<br>JavaScript 函数有个内置的对象 arguments 对象。</p>\n<p>argument 对象包含了函数调用的参数数组。</p>\n<p>通过这种方式你可以很方便的找到最大的一个参数的值：</p>\n<p>实例<br>x = findMax(1, 123, 500, 115, 44, 88);</p>\n<p>function findMax() {<br>    var i, max = arguments[0];</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(arguments.length &lt; 2) return max;</span><br><span class=\"line\"> </span><br><span class=\"line\">for (i = 0; i &lt; arguments.length; i++) &#123;</span><br><span class=\"line\">    if (arguments[i] &gt; max) &#123;</span><br><span class=\"line\">        max = arguments[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return max;</span><br></pre></td></tr></table></div></figure>\n\n<p>}</p>\n<p>尝试一下 »<br>或者创建一个函数用来统计所有数值的和：</p>\n<p>实例<br>x = sumAll(1, 123, 500, 115, 44, 88);</p>\n<p>function sumAll() {<br>    var i, sum = 0;<br>    for (i = 0; i &lt; arguments.length; i++) {<br>        sum += arguments[i];<br>    }<br>    return sum;<br>}</p>\n<p>尝试一下 »</p>\n<p>通过值传递参数<br>在函数中调用的参数是函数的隐式参数。</p>\n<p>JavaScript 隐式参数通过值来传递：函数仅仅只是获取值。</p>\n<p>如果函数修改参数的值，不会修改显式参数的初始值（在函数外定义）。</p>\n<p>隐式参数的改变在函数外是不可见的。</p>\n<p>通过对象传递参数<br>在JavaScript中，可以引用对象的值。</p>\n<p>因此我们在函数内部修改对象的属性就会修改其初始的值。</p>\n<p>修改对象属性可作用于函数外部（全局变量）。</p>\n<p>修改对象属性在函数外是可见的。</p>\n</some-html-element></some-html-element>","prev":{"title":"从输入URL到页面呈现发生了什么","link":"2018/09/28/从输入URL到页面呈现发生了什么"},"next":{"title":"文档对象模型","link":"2018/08/26/文档对象模型"},"plink":"http://Li_junhui.github.io.git/2018/09/06/关于JavaScript的若干知识点/"}