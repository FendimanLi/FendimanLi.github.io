{"title":"React+Umi+dva+antdnd 技术栈","date":"2019-10-09T02:10:56.000Z","link":"2019/10/09/React+Umi+Dva+Antd-技术栈","comments":true,"updated":"2019-10-09T03:15:16.472Z","content":"<h4 id=\"1-Dva-js快速上手\">1.  <code>Dva.js</code>快速上手<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#1-Dva-js快速上手\"></a></h4><h5 id=\"安装dva-cli\">安装dva-cli<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#安装dva-cli\"></a></h5><p>通过 npm 安装 dva-cli 并确保版本是 <code>0.9.1</code> 或以上。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install dva-cli -g</span><br><span class=\"line\">$ dva -v</span><br><span class=\"line\">dva-cli version 0.9.1</span><br></pre></td></tr></table></div></figure>\n\n<h5 id=\"创建新应用\">创建新应用<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#创建新应用\"></a></h5><p>安装完 dva-cli 之后，就可以在命令行里访问到 <code>dva</code> 命令（<a href=\"http://stackoverflow.com/questions/15054388/global-node-modules-not-installing-correctly-command-not-found\" target=\"_blank\" rel=\"noopener\">不能访问？</a>）。现在，你可以通过 <code>dva new</code> 创建新应用。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ dva new dva-quickstart</span><br></pre></td></tr></table></div></figure>\n\n<p>这会创建 <code>dva-quickstart</code> 目录，包含项目初始化目录和文件，并提供开发服务器、构建脚本、数据 mock 服务、代理服务器等功能。</p>\n<p>然后我们 <code>cd</code> 进入 <code>dva-quickstart</code> 目录，并启动开发服务器：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> dva-quickstart</span><br><span class=\"line\">$ npm start</span><br></pre></td></tr></table></div></figure>\n\n<p>几秒钟后，你会看到以下输出：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Compiled successfully!</span><br><span class=\"line\"></span><br><span class=\"line\">The app is running at:</span><br><span class=\"line\"></span><br><span class=\"line\">  http://localhost:8000/</span><br><span class=\"line\"></span><br><span class=\"line\">Note that the development build is not optimized.</span><br><span class=\"line\">To create a production build, use npm run build.</span><br></pre></td></tr></table></div></figure>\n\n<p>在浏览器里打开 <a href=\"http://localhost:8000\" target=\"_blank\" rel=\"noopener\">http://localhost:8000</a> ，你会看到 dva 的欢迎界面。</p>\n<h5 id=\"使用antd\">使用antd<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#使用antd\"></a></h5><p>通过 npm 安装 <code>antd</code> 和 <code>babel-plugin-import</code> 。<code>babel-plugin-import</code> 是用来按需加载 antd 的脚本和样式的，详见 <a href=\"https://github.com/ant-design/babel-plugin-import\" target=\"_blank\" rel=\"noopener\">repo</a> 。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install antd babel-plugin-import --save</span><br></pre></td></tr></table></div></figure>\n\n<p>编辑 <code>.webpackrc</code>，使 <code>babel-plugin-import</code> 插件生效。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"addition\">+  \"extraBabelPlugins\": [</span></span><br><span class=\"line\"><span class=\"addition\">+    [\"import\", &#123; \"libraryName\": \"antd\", \"libraryDirectory\": \"es\", \"style\": \"css\" &#125;]</span></span><br><span class=\"line\"><span class=\"addition\">+  ]</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<blockquote>\n<p>注：dva-cli 基于 roadhog 实现 build 和 dev，更多 <code>.webpackrc</code> 的配置详见 <a href=\"https://github.com/sorrycc/roadhog#配置\" target=\"_blank\" rel=\"noopener\">roadhog#配置</a></p>\n</blockquote>\n<h5 id=\"定义路由\">定义路由<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#定义路由\"></a></h5><p>我们要写个应用来先显示产品列表。首先第一步是创建路由，路由可以想象成是组成应用的不同页面。</p>\n<p>新建 route component <code>routes/Products.js</code>，内容如下：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Products = <span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> (</span><br><span class=\"line\">  &lt;h2&gt;List <span class=\"keyword\">of</span> Products&lt;<span class=\"regexp\">/h2&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">export default Products;</span></span><br></pre></td></tr></table></div></figure>\n\n<p>添加路由信息到路由表，编辑 <code>router.js</code> :</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"addition\">+ import Products from './routes/Products';</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"addition\">+ &lt;Route path=\"/products\" exact component=&#123;Products&#125; /&gt;</span></span><br></pre></td></tr></table></div></figure>\n\n<p>然后在浏览器里打开 <a href=\"http://localhost:8000/#/products\" target=\"_blank\" rel=\"noopener\">http://localhost:8000/#/products</a> ，你应该能看到前面定义的 <code>&lt;h2&gt;</code> 标签。</p>\n<h5 id=\"编写UI-Component\">编写UI Component<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#编写UI-Component\"></a></h5><p>随着应用的发展，你会需要在多个页面分享 UI 元素 (或在一个页面使用多次)，在 dva 里你可以把这部分抽成 component 。</p>\n<p>我们来编写一个 <code>ProductList</code> component，这样就能在不同的地方显示产品列表了。</p>\n<p>新建 <code>components/ProductList.js</code> 文件：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> PropTypes <span class=\"keyword\">from</span> <span class=\"string\">'prop-types'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Table, Popconfirm, Button &#125; <span class=\"keyword\">from</span> <span class=\"string\">'antd'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> ProductList = <span class=\"function\">(<span class=\"params\">&#123; onDelete, products &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> columns = [&#123;</span><br><span class=\"line\">    title: <span class=\"string\">'Name'</span>,</span><br><span class=\"line\">    dataIndex: <span class=\"string\">'name'</span>,</span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    title: <span class=\"string\">'Actions'</span>,</span><br><span class=\"line\">    render: <span class=\"function\">(<span class=\"params\">text, record</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        &lt;Popconfirm title=<span class=\"string\">\"Delete?\"</span> onConfirm=&#123;() =&gt; onDelete(record.id)&#125;&gt;</span><br><span class=\"line\">          &lt;Button&gt;Delete&lt;<span class=\"regexp\">/Button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>Popconfirm&gt;</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Table</span><br><span class=\"line\">      dataSource=&#123;products&#125;</span><br><span class=\"line\">      columns=&#123;columns&#125;</span><br><span class=\"line\">    /&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">ProductList.propTypes = &#123;</span><br><span class=\"line\">  onDelete: PropTypes.func.isRequired,</span><br><span class=\"line\">  products: PropTypes.array.isRequired,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> ProductList;</span><br></pre></td></tr></table></div></figure>\n\n<h5 id=\"定义model\">定义model<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#定义model\"></a></h5><p>完成 UI 后，现在开始处理数据和逻辑。</p>\n<p>dva 通过 model 的概念把一个领域的模型管理起来，包含同步更新 state 的 reducers，处理异步逻辑的 effects，订阅数据源的 subscriptions 。</p>\n<p>新建 model <code>models/products.js</code> ：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  namespace: <span class=\"string\">'products'</span>,</span><br><span class=\"line\">  state: [],</span><br><span class=\"line\">  reducers: &#123;</span><br><span class=\"line\">    <span class=\"string\">'delete'</span>(state, &#123; <span class=\"attr\">payload</span>: id &#125;) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state.filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.id !== id);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></div></figure>\n\n<p>这个 model 里：</p>\n<ul>\n<li><code>namespace</code> 表示在全局 state 上的 key</li>\n<li><code>state</code> 是初始值，在这里是空数组</li>\n<li><code>reducers</code> 等同于 redux 里的 reducer，接收 action，同步更新 state</li>\n</ul>\n<p>然后别忘记在 <code>index.js</code> 里载入他：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 3. Model</span><br><span class=\"line\"><span class=\"addition\">+ app.model(require('./models/products').default);</span></span><br></pre></td></tr></table></div></figure>\n\n<h5 id=\"connect起来\">connect起来<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#connect起来\"></a></h5><p>到这里，我们已经单独完成了 model 和 component，那么他们如何串联起来呢?</p>\n<p>dva 提供了 connect 方法。如果你熟悉 redux，这个 connect 就是 react-redux 的 connect 。</p>\n<p>编辑 <code>routes/Products.js</code>，替换为以下内容：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; connect &#125; <span class=\"keyword\">from</span> <span class=\"string\">'dva'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ProductList <span class=\"keyword\">from</span> <span class=\"string\">'../components/ProductList'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Products = <span class=\"function\">(<span class=\"params\">&#123; dispatch, products &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleDelete</span>(<span class=\"params\">id</span>) </span>&#123;</span><br><span class=\"line\">    dispatch(&#123;</span><br><span class=\"line\">      type: <span class=\"string\">'products/delete'</span>,</span><br><span class=\"line\">      payload: id,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;h2&gt;List <span class=\"keyword\">of</span> Products&lt;<span class=\"regexp\">/h2&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;ProductList onDelete=&#123;handleDelete&#125; products=&#123;products&#125; /</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ export default Products;</span></span><br><span class=\"line\"><span class=\"regexp\">export default connect((&#123; products &#125;) =&gt; (&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  products,</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;))(Products);</span></span><br></pre></td></tr></table></div></figure>\n\n<p>最后，我们还需要一些初始数据让这个应用 run 起来。编辑 <code>index.js</code>：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">- const app = dva();</span></span><br><span class=\"line\"><span class=\"addition\">+ const app = dva(&#123;</span></span><br><span class=\"line\"><span class=\"addition\">+   initialState: &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+     products: [</span></span><br><span class=\"line\"><span class=\"addition\">+       &#123; name: 'dva', id: 1 &#125;,</span></span><br><span class=\"line\"><span class=\"addition\">+       &#123; name: 'antd', id: 2 &#125;,</span></span><br><span class=\"line\"><span class=\"addition\">+     ],</span></span><br><span class=\"line\"><span class=\"addition\">+   &#125;,</span></span><br><span class=\"line\"><span class=\"addition\">+ &#125;);</span></span><br></pre></td></tr></table></div></figure>\n\n<p>刷新浏览器，应该能看到以下效果：</p>\n<p><img src=\"/2019/10/09/React+Umi+Dva+Antd-技术栈/D:%5CMyblog%5ChowlBlog%5Csource_posts%5CReact+Umi+Dva+Antd-%E6%8A%80%E6%9C%AF%E6%A0%88%5C2.png\" alt class=\"article-img\"></p>\n<h5 id=\"构建应用\">构建应用<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#构建应用\"></a></h5><p>完成开发并且在开发环境验证之后，就需要部署给我们的用户了。先执行下面的命令：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm run build</span><br></pre></td></tr></table></div></figure>\n\n<p>几秒后，输出应该如下：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; @ build /private/tmp/myapp</span><br><span class=\"line\">&gt; roadhog build</span><br><span class=\"line\"></span><br><span class=\"line\">Creating an optimized production build...</span><br><span class=\"line\">Compiled successfully.</span><br><span class=\"line\"></span><br><span class=\"line\">File sizes after gzip:</span><br><span class=\"line\"></span><br><span class=\"line\">  82.98 KB  dist/index.js</span><br><span class=\"line\">  270 B     dist/index.css</span><br></pre></td></tr></table></div></figure>\n\n<p><code>build</code> 命令会打包所有的资源，包含 JavaScript, CSS, web fonts, images, html 等。然后你可以在 <code>dist/</code> 目录下找到这些文件。</p>\n<h4 id=\"2-React-dva-umi-antd-如何新增页面\">2. React+<code>dva</code>+<code>umi</code>+<code>antd</code> 如何新增页面<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#2-React-dva-umi-antd-如何新增页面\"></a></h4><ul>\n<li><p>在<code>config</code>==&gt;<code>router.config.js</code>中配置路由信息</p>\n</li>\n<li><p>在pages文件下对应的页面文件夹，创建需要的页面，models文件夹主要处理<code>redux</code>一些操作，view层构建页面</p>\n</li>\n<li><p>在components文件夹下的<code>GolbalHeader</code>下<code>index.js</code>文件里面添加需要的路由信息</p>\n<p><img src=\"/2019/10/09/React+Umi+Dva+Antd-技术栈/D:%5CMyblog%5ChowlBlog%5Csource_posts%5CReact+Umi+Dva+Antd-%E6%8A%80%E6%9C%AF%E6%A0%88%5C1.png\" alt class=\"article-img\"></p>\n</li>\n</ul>\n<p>active，添加一个sub信息，对应的length要加1，然后这个active对应的length，就是下一个active的index，对应的length加1，</p>\n<ul>\n<li>在页面的<code>view</code>层<code>js</code>文件中添加<code>topTabExec</code>切换函数，可以在页面上动态的切换对应的菜单栏</li>\n</ul>\n<h4 id=\"3-Connect传递model中的数据给组件router\">3.Connect传递model中的数据给组件router<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#3-Connect传递model中的数据给组件router\"></a></h4><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">前面的model的demo中定义的example.js中定义了state数据，如何在route的路由组件中获取这些数据呢？</span><br><span class=\"line\">通过connect可以传递过来，然后通过<span class=\"keyword\">this</span>.props就可以访问了，同样会把dispatch（可以发送请求到model去），history方法传递过来，这样就可以通过组件获取到model保存的值了</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">//采用ES6注解的形式传递值都是一样的</span></span><br><span class=\"line\">   <span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react;</span></span><br><span class=\"line\"><span class=\"string\">   import &#123;Component&#125; from '</span>react<span class=\"string\">';</span></span><br><span class=\"line\"><span class=\"string\">   import &#123;connect&#125; from '</span>dva<span class=\"string\">' //从dva中导入connect</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">   @connect(&#123;example&#125;)</span></span><br><span class=\"line\"><span class=\"string\">   class Counter extends Component &#123;</span></span><br><span class=\"line\"><span class=\"string\">       constructor(props)&#123;</span></span><br><span class=\"line\"><span class=\"string\">           super(props)</span></span><br><span class=\"line\"><span class=\"string\">       &#125;</span></span><br><span class=\"line\"><span class=\"string\">       render()&#123;</span></span><br><span class=\"line\"><span class=\"string\">           return(</span></span><br><span class=\"line\"><span class=\"string\">               &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">                   &lt;p&gt;this.props.example.initText&lt;/p&gt; //这里就获取到了上面定义的initText数据</span></span><br><span class=\"line\"><span class=\"string\">               &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">           )</span></span><br><span class=\"line\"><span class=\"string\">       &#125;</span></span><br><span class=\"line\"><span class=\"string\">   &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">详细参考：https://blog.csdn.net/weixin_40792878/article/details/82050486</span></span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"4-dva-js-知识梳理\">4. <code>dva.js</code> 知识梳理<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#4-dva-js-知识梳理\"></a></h4><p>不知大家学 react 或 dva 时会不会有这样的疑惑：</p>\n<ul>\n<li>es6 特性那么多，我需要全部学会吗?</li>\n<li>react component 有 3 种写法，我需要全部学会吗?</li>\n<li>reducer 的增删改应该怎么写?</li>\n<li>怎么做全局/局部的错误处理?</li>\n<li>怎么发异步请求?</li>\n<li>怎么处理复杂的异步业务逻辑?</li>\n<li>怎么配置路由?</li>\n<li>…</li>\n</ul>\n<p>这篇文档梳理了基于<a href=\"https://link.jianshu.com/?t=https://github.com/dvajs/dva-cli\" target=\"_blank\" rel=\"noopener\">dva-cli</a>使用<a href=\"https://link.jianshu.com/?t=https://github.com/dvajs/dva\" target=\"_blank\" rel=\"noopener\">dva</a>的最小知识集，让你可以用最少的时间掌握创建类似<a href=\"https://link.jianshu.com/?t=https://github.com/dvajs/dva-hackernews\" target=\"_blank\" rel=\"noopener\">dva-hackernews</a>的全部知识，并且不需要掌握额外的冗余知识。</p>\n<h5 id=\"javascript语言\">javascript语言<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#javascript语言\"></a></h5><h5 id=\"变量的声明\">变量的声明<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#变量的声明\"></a></h5><h5 id=\"const和let\"><code>const</code>和let<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#const和let\"></a></h5><p>不要用<code>var</code>，而是用<code>const</code>和<code>let</code>，分别表示常量和变量。不同于<code>var</code>的函数作用域，<code>const</code>和<code>let</code>都是块级作用域。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const DELAY = 1000;</span><br><span class=\"line\"></span><br><span class=\"line\">let count = 0;</span><br><span class=\"line\">count = count + 1;</span><br></pre></td></tr></table></div></figure>\n\n<h5 id=\"模板字符串\">模板字符串<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#模板字符串\"></a></h5><p>模板字符串提供了另一种做字符串组合的方法。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const user = &apos;world&apos;;</span><br><span class=\"line\">console.log(`hello $&#123;user&#125;`);  // hello world</span><br><span class=\"line\"></span><br><span class=\"line\">// 多行</span><br><span class=\"line\">const content = `</span><br><span class=\"line\">  Hello $&#123;firstName&#125;,</span><br><span class=\"line\">  Thanks for ordering $&#123;qty&#125; tickets to $&#123;event&#125;.</span><br><span class=\"line\">`;</span><br></pre></td></tr></table></div></figure>\n\n<h5 id=\"默认参数\">默认参数<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#默认参数\"></a></h5><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function logActivity(activity = &apos;skiing&apos;) &#123;</span><br><span class=\"line\">  console.log(activity);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">logActivity();  // skiing</span><br></pre></td></tr></table></div></figure>\n\n<h5 id=\"箭头函数\">箭头函数<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#箭头函数\"></a></h5><p>函数的快捷写法，不需要通过<code>function</code>关键字创建函数，并且还可以省略<code>return</code>关键字。同时，箭头函数还会继承当前上下文的<code>this</code>关键字。</p>\n<p>比如：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1, 2, 3].map(x =&gt; x + 1);  // [2, 3, 4]</span><br></pre></td></tr></table></div></figure>\n\n<p>等同于：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1, 2, 3].map((function(x) &#123;</span><br><span class=\"line\">  return x + 1;</span><br><span class=\"line\">&#125;).bind(this));</span><br></pre></td></tr></table></div></figure>\n\n<p>模块的 Import 和 Export</p>\n<p><code>import</code>用于引入模块，<code>export</code>用于导出模块。</p>\n<p>比如：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 引入全部</span><br><span class=\"line\">import dva from &apos;dva&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 引入部分</span><br><span class=\"line\">import &#123; connect &#125; from &apos;dva&apos;;</span><br><span class=\"line\">import &#123; Link, Route &#125; from &apos;dva/router&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 引入全部并作为 github 对象</span><br><span class=\"line\">import * as github from &apos;./services/github&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 导出默认</span><br><span class=\"line\">export default App;</span><br><span class=\"line\">// 部分导出，需 import &#123; App &#125; from &apos;./file&apos;; 引入</span><br><span class=\"line\">export class App extend Component &#123;&#125;;</span><br></pre></td></tr></table></div></figure>\n\n<h5 id=\"ES6-对象和数组\">ES6 对象和数组<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#ES6-对象和数组\"></a></h5><h5 id=\"解构赋值\">解构赋值<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#解构赋值\"></a></h5><p>解构赋值让我们从 Object 或 Array 里取部分数据存为变量。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 对象</span><br><span class=\"line\">const user = &#123; name: &apos;guanguan&apos;, age: 2 &#125;;</span><br><span class=\"line\">const &#123; name, age &#125; = user;</span><br><span class=\"line\">console.log(`$&#123;name&#125; : $&#123;age&#125;`);  // guanguan : 2</span><br><span class=\"line\"></span><br><span class=\"line\">// 数组</span><br><span class=\"line\">const arr = [1, 2];</span><br><span class=\"line\">const [foo, bar] = arr;</span><br><span class=\"line\">console.log(foo);  // 1</span><br></pre></td></tr></table></div></figure>\n\n<p>我们也可以解构传入的函数参数。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const add = (state, &#123; payload &#125;) =&gt; &#123;</span><br><span class=\"line\">  return state.concat(payload);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></div></figure>\n\n<p>解构时还可以配 alias，让代码更具有语义。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const add = (state, &#123; payload: todo &#125;) =&gt; &#123;</span><br><span class=\"line\">  return state.concat(todo);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></div></figure>\n\n<h5 id=\"对象字面量改进\">对象字面量改进<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#对象字面量改进\"></a></h5><p>这是解构的反向操作，用于重新组织一个 Object 。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const name = &apos;duoduo&apos;;</span><br><span class=\"line\">const age = 8;</span><br><span class=\"line\"></span><br><span class=\"line\">const user = &#123; name, age &#125;;  // &#123; name: &apos;duoduo&apos;, age: 8 &#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>定义对象方法时，还可以省去<code>function</code>关键字。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.model(&#123;</span><br><span class=\"line\">  reducers: &#123;</span><br><span class=\"line\">    add() &#123;&#125;  // 等同于 add: function() &#123;&#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  effects: &#123;</span><br><span class=\"line\">    *addRemote() &#123;&#125;  // 等同于 addRemote: function*() &#123;&#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></div></figure>\n\n<h5 id=\"Spread-Operator\">Spread Operator<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#Spread-Operator\"></a></h5><p>Spread Operator 即 3 个点<code>...</code>，有几种不同的使用方法。<br>可用于组装数组。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const todos = [&apos;Learn dva&apos;];</span><br><span class=\"line\">[...todos, &apos;Learn antd&apos;];  // [&apos;Learn dva&apos;, &apos;Learn antd&apos;]</span><br></pre></td></tr></table></div></figure>\n\n<p>也可用于获取数组的部分项。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;];</span><br><span class=\"line\">const [first, ...rest] = arr;</span><br><span class=\"line\">rest;  // [&apos;b&apos;, &apos;c&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">// With ignore</span><br><span class=\"line\">const [first, , ...rest] = arr;</span><br><span class=\"line\">rest;  // [&apos;c&apos;]</span><br></pre></td></tr></table></div></figure>\n\n<p>还可收集函数参数为数组。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function directions(first, ...rest) &#123;</span><br><span class=\"line\">  console.log(rest);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">directions(&apos;a&apos;, &apos;b&apos;, &apos;c&apos;);  // [&apos;b&apos;, &apos;c&apos;];</span><br></pre></td></tr></table></div></figure>\n\n<p>代替 apply。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo(x, y, z) &#123;&#125;</span><br><span class=\"line\">const args = [1,2,3];</span><br><span class=\"line\"></span><br><span class=\"line\">// 下面两句效果相同</span><br><span class=\"line\">foo.apply(null, args);</span><br><span class=\"line\">foo(...args);</span><br></pre></td></tr></table></div></figure>\n\n<p>对于 Object 而言，用于组合成新的 Object 。(ES2017 stage-2 proposal)</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const foo = &#123;</span><br><span class=\"line\">  a: 1,</span><br><span class=\"line\">  b: 2,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">const bar = &#123;</span><br><span class=\"line\">  b: 3,</span><br><span class=\"line\">  c: 2,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">const d = 4;</span><br><span class=\"line\"></span><br><span class=\"line\">const ret = &#123; ...foo, ...bar, d &#125;;  // &#123; a:1, b:3, c:2, d:4 &#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>此外，在 JSX 中 Spread Operator 还可用于扩展 props，<br>详见<a href=\"https://link.jianshu.com/?t=https://github.com/dvajs/dva-knowledgemap#spread-attributes\" target=\"_blank\" rel=\"noopener\">SpreadAttributes</a>。</p>\n<h5 id=\"Promises\">Promises<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#Promises\"></a></h5><p>Promise 用于更优雅地处理异步请求。比如发起异步请求：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetch(&apos;/api/todos&apos;)</span><br><span class=\"line\">  .then(res =&gt; res.json())</span><br><span class=\"line\">  .then(data =&gt; (&#123; data &#125;))</span><br><span class=\"line\">  .catch(err =&gt; (&#123; err &#125;));</span><br></pre></td></tr></table></div></figure>\n\n<p>定义 Promise 。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const delay = (timeout) =&gt; &#123;</span><br><span class=\"line\">  return new Promise(resolve =&gt; &#123;</span><br><span class=\"line\">    setTimeout(resolve, timeout);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">delay(1000).then(_ =&gt; &#123;</span><br><span class=\"line\">  console.log(&apos;executed&apos;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></div></figure>\n\n<h5 id=\"Generators\">Generators<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#Generators\"></a></h5><p>dva 的 effects 是通过 generator 组织的。Generator 返回的是迭代器，通过<code>yield</code>关键字实现暂停功能。这是一个典型的 dva effect，通<code>yield</code>把异步逻辑通过同步的方式组织起来。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.model(&#123;</span><br><span class=\"line\">  namespace: &apos;todos&apos;,</span><br><span class=\"line\">  effects: &#123;</span><br><span class=\"line\">    *addRemote(&#123; payload: todo &#125;, &#123; put, call &#125;) &#123;</span><br><span class=\"line\">      yield call(addTodo, todo);</span><br><span class=\"line\">      yield put(&#123; type: &apos;add&apos;, payload: todo &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></div></figure>\n\n<h5 id=\"React-Component\">React Component<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#React-Component\"></a></h5><h5 id=\"Stateless-Functional-Components\">Stateless Functional Components<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#Stateless-Functional-Components\"></a></h5><p>React Component 有 3 种定义方式，分别是<code>React.createClass</code>,<code>class</code>和<br><code>Stateless Functional Component</code>。推荐尽量使用最后一种，保持简洁和无状态。这是函数，不是 Object，没有<code>this</code>作用域，是 pure function。<br>比如定义 App Component 。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function App(props) &#123;</span><br><span class=\"line\">  function handleClick() &#123;</span><br><span class=\"line\">    props.dispatch(&#123; type: &apos;app/create&apos; &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return &lt;div onClick=&#123;handleClick&#125;&gt;$&#123;props.name&#125;&lt;/div&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>等同于：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class App extends React.Component &#123;</span><br><span class=\"line\">  handleClick() &#123;</span><br><span class=\"line\">    this.props.dispatch(&#123; type: &apos;app/create&apos; &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return &lt;div onClick=&#123;this.handleClick.bind(this)&#125;&gt;$&#123;this.props.name&#125;&lt;/div&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h5 id=\"JSX\">JSX<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#JSX\"></a></h5><h5 id=\"Component-嵌套\">Component 嵌套<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#Component-嵌套\"></a></h5><p>类似 HTML，JSX 里可以给组件添加子组件。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;App&gt;</span><br><span class=\"line\">  &lt;Header /&gt;</span><br><span class=\"line\">  &lt;MainContent /&gt;</span><br><span class=\"line\">  &lt;Footer /&gt;</span><br><span class=\"line\">&lt;/App&gt;</span><br></pre></td></tr></table></div></figure>\n\n<h5 id=\"className\">className<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#className\"></a></h5><p><code>class</code>是保留词，所以添加样式时，需用<code>className</code>代替<code>class</code>。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h1 className=&quot;fancy&quot;&gt;Hello dva&lt;/h1&gt;</span><br></pre></td></tr></table></div></figure>\n\n<p>JavaScript 表达式</p>\n<p>JavaScript 表达式需要用<code>{}</code>括起来，会执行并返回结果。</p>\n<p>比如：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h1&gt;&#123; this.props.title &#125;&lt;/h1&gt;</span><br></pre></td></tr></table></div></figure>\n\n<h5 id=\"Mapping-Arrays-to-JSX\">Mapping Arrays to JSX<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#Mapping-Arrays-to-JSX\"></a></h5><p>可以把数组映射为 JSX 元素列表。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">  &#123; this.props.todos.map((todo, i) =&gt; &lt;li key=&#123;i&#125;&gt;&#123;todo&#125;&lt;/li&gt;) &#125;</span><br><span class=\"line\">&lt;/ul&gt;</span><br></pre></td></tr></table></div></figure>\n\n<h5 id=\"注释\">注释<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#注释\"></a></h5><p>尽量别用<code>//</code>做单行注释。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h1&gt;</span><br><span class=\"line\">  &#123;/* multiline comment */&#125;</span><br><span class=\"line\">  &#123;/*</span><br><span class=\"line\">    multi</span><br><span class=\"line\">    line</span><br><span class=\"line\">    comment</span><br><span class=\"line\">    */&#125;</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    // single line</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Hello</span><br><span class=\"line\">&lt;/h1&gt;</span><br></pre></td></tr></table></div></figure>\n\n<h5 id=\"Spread-Attributes\">Spread Attributes<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#Spread-Attributes\"></a></h5><p>这是 JSX 从 ECMAScript6 借鉴过来的很有用的特性，用于扩充组件 props 。</p>\n<p>比如：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const attrs = &#123;</span><br><span class=\"line\">  href: &apos;http://example.org&apos;,</span><br><span class=\"line\">  target: &apos;_blank&apos;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;a &#123;...attrs&#125;&gt;Hello&lt;/a&gt;</span><br></pre></td></tr></table></div></figure>\n\n<p>等同于</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const attrs = &#123;</span><br><span class=\"line\">  href: &apos;http://example.org&apos;,</span><br><span class=\"line\">  target: &apos;_blank&apos;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;a href=&#123;attrs.href&#125; target=&#123;attrs.target&#125;&gt;Hello&lt;/a&gt;</span><br></pre></td></tr></table></div></figure>\n\n<h5 id=\"Props\">Props<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#Props\"></a></h5><p>数据处理在 React 中是非常重要的概念之一，分别可以通过 props, state 和 context 来处理数据。而在 dva 应用里，你只需关心 props 。</p>\n<h5 id=\"propTypes\">propTypes<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#propTypes\"></a></h5><p>JavaScript 是弱类型语言，所以请尽量声明 propTypes 对 props 进行校验，以减少不必要的问题。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function App(props) &#123;</span><br><span class=\"line\">  return &lt;div&gt;&#123;props.name&#125;&lt;/div&gt;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">App.propTypes = &#123;</span><br><span class=\"line\">  name: React.PropTypes.string.isRequired,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></div></figure>\n\n<p>内置的 prop type 有：</p>\n<ul>\n<li><p>PropTypes.array</p>\n</li>\n<li><p>PropTypes.bool</p>\n</li>\n<li><p>PropTypes.func</p>\n</li>\n<li><p>PropTypes.number</p>\n</li>\n<li><p>PropTypes.object</p>\n</li>\n<li><p>PropTypes.string</p>\n</li>\n</ul>\n<p>定义全局 CSS</p>\n<p>CSS Modules 默认是局部作用域的，想要声明一个全局规则，可用<code>:global</code>语法。</p>\n<p>比如：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.title &#123;</span><br><span class=\"line\">  color: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">:global(.title) &#123;</span><br><span class=\"line\">  color: green;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>然后在引用的时候：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;App className=&#123;styles.title&#125; /&gt; // red</span><br><span class=\"line\">&lt;App className=&quot;title&quot; /&gt;        // green</span><br></pre></td></tr></table></div></figure>\n\n<h5 id=\"classnames-Package\"><code>classnames</code> Package<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#classnames-Package\"></a></h5><p>在一些复杂的场景中，一个元素可能对应多个 className，而每个 className 又基于一些条件来决定是否出现。这时，<a href=\"https://link.jianshu.com/?t=https://github.com/JedWatson/classnames\" target=\"_blank\" rel=\"noopener\">classnames</a>这个库就非常有用。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import classnames from &apos;classnames&apos;;</span><br><span class=\"line\">const App = (props) =&gt; &#123;</span><br><span class=\"line\">  const cls = classnames(&#123;</span><br><span class=\"line\">    btn: true,</span><br><span class=\"line\">    btnLarge: props.type === &apos;submit&apos;,</span><br><span class=\"line\">    btnSmall: props.type === &apos;edit&apos;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  return &lt;div className=&#123; cls &#125; /&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>这样，传入不同的 type 给 App 组件，就会返回不同的 className 组合：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;App type=&quot;submit&quot; /&gt; // btn btnLarge</span><br><span class=\"line\">&lt;App type=&quot;edit&quot; /&gt;   // btn btnSmall</span><br></pre></td></tr></table></div></figure>\n\n<p>Reducer</p>\n<p>reducer 是一个函数，接受 state 和 action，返回老的或新的 state 。即：<code>(state, action) =&gt; state</code></p>\n<h5 id=\"增删改\">增删改<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#增删改\"></a></h5><p>以 todos 为例。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.model(&#123;</span><br><span class=\"line\">  namespace: &apos;todos&apos;,</span><br><span class=\"line\">  state: [],</span><br><span class=\"line\">  reducers: &#123;</span><br><span class=\"line\">    add(state, &#123; payload: todo &#125;) &#123;</span><br><span class=\"line\">      return state.concat(todo);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    remove(state, &#123; payload: id &#125;) &#123;</span><br><span class=\"line\">      return state.filter(todo =&gt; todo.id !== id);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    update(state, &#123; payload: updatedTodo &#125;) &#123;</span><br><span class=\"line\">      return state.map(todo =&gt; &#123;</span><br><span class=\"line\">        if (todo.id === updatedTodo.id) &#123;</span><br><span class=\"line\">          return &#123; ...todo, ...updatedTodo &#125;;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">          return todo;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></div></figure>\n\n<h5 id=\"嵌套数据的增删改\">嵌套数据的增删改<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#嵌套数据的增删改\"></a></h5><p>建议最多一层嵌套，以保持 state 的扁平化，深层嵌套会让 reducer 很难写和难以维护。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.model(&#123;</span><br><span class=\"line\">  namespace: &apos;app&apos;,</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    todos: [],</span><br><span class=\"line\">    loading: false,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  reducers: &#123;</span><br><span class=\"line\">    add(state, &#123; payload: todo &#125;) &#123;</span><br><span class=\"line\">      const todos = state.todos.concat(todo);</span><br><span class=\"line\">      return &#123; ...state, todos &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></div></figure>\n\n<p>下面是深层嵌套的例子，应尽量避免。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.model(&#123;</span><br><span class=\"line\">  namespace: &apos;app&apos;,</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    a: &#123;</span><br><span class=\"line\">      b: &#123;</span><br><span class=\"line\">        todos: [],</span><br><span class=\"line\">        loading: false,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  reducers: &#123;</span><br><span class=\"line\">    add(state, &#123; payload: todo &#125;) &#123;</span><br><span class=\"line\">      const todos = state.a.b.todos.concat(todo);</span><br><span class=\"line\">      const b = &#123; ...state.a.b, todos &#125;;</span><br><span class=\"line\">      const a = &#123; ...state.a, b &#125;;</span><br><span class=\"line\">      return &#123; ...state, a &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></div></figure>\n\n<p>Effect</p>\n<p>示例：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.model(&#123;</span><br><span class=\"line\">  namespace: &apos;todos&apos;,</span><br><span class=\"line\">  effects: &#123;</span><br><span class=\"line\">    *addRemote(&#123; payload: todo &#125;, &#123; put, call &#125;) &#123;</span><br><span class=\"line\">      yield call(addTodo, todo);</span><br><span class=\"line\">      yield put(&#123; type: &apos;add&apos;, payload: todo &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></div></figure>\n\n<h5 id=\"Effects\">Effects<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#Effects\"></a></h5><h5 id=\"put\">put<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#put\"></a></h5><p>用于触发 action 。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yield put(&#123; type: &apos;todos/add&apos;, payload: &apos;Learn Dva&apos; &#125;);</span><br></pre></td></tr></table></div></figure>\n\n<h5 id=\"call\">call<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#call\"></a></h5><p>用于调用异步逻辑，支持 promise 。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const result = yield call(fetch, &apos;/todos&apos;);</span><br></pre></td></tr></table></div></figure>\n\n<p>select</p>\n<p>用于从 state 里获取数据。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const todos = yield select(state =&gt; state.todos);</span><br></pre></td></tr></table></div></figure>\n\n<h5 id=\"错误处理\">错误处理<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#错误处理\"></a></h5><h5 id=\"全局错误处理\">全局错误处理<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#全局错误处理\"></a></h5><p>dva 里，effects 和 subscriptions 的抛错全部会走<code>onError</code> hook，所以可以在<code>onError</code>里统一处理错误。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const app = dva(&#123;</span><br><span class=\"line\">  onError(e, dispatch) &#123;</span><br><span class=\"line\">    console.log(e.message);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></div></figure>\n\n<p>然后 effects 里的抛错和 reject 的 promise 就都会被捕获到了。</p>\n<p>本地错误处理</p>\n<p>如果需要对某些 effects 的错误进行特殊处理，需要在 effect 内部加<code>try catch</code>。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.model(&#123;</span><br><span class=\"line\">  effects: &#123;</span><br><span class=\"line\">    *addRemote() &#123;</span><br><span class=\"line\">      try &#123;</span><br><span class=\"line\">        // Your Code Here</span><br><span class=\"line\">      &#125; catch(e) &#123;</span><br><span class=\"line\">        console.log(e.message);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></div></figure>\n\n<p>异步请求</p>\n<p>异步请求基于 whatwg-fetch，API 详见：<a href=\"https://link.jianshu.com/?t=https://github.com/github/fetch\" target=\"_blank\" rel=\"noopener\">https://github.com/github/fetch</a></p>\n<h5 id=\"GET-和-POST\">GET 和 POST<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#GET-和-POST\"></a></h5><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import request from &apos;../util/request&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">// GET</span><br><span class=\"line\">request(&apos;/api/todos&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">// POST</span><br><span class=\"line\">request(&apos;/api/todos&apos;, &#123;</span><br><span class=\"line\">  method: &apos;POST&apos;,</span><br><span class=\"line\">  body: JSON.stringify(&#123; a: 1 &#125;),</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></div></figure>\n\n<p>统一错误处理</p>\n<p>加入约定后台返回以下格式时，做统一的错误处理。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  status: &apos;error&apos;,</span><br><span class=\"line\">  message: &apos;&apos;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>编辑</p>\n<p><code>utils/request.js</code>，加入以下中间件：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function parseErrorMessage(&#123; data &#125;) &#123;</span><br><span class=\"line\">  const &#123; status, message &#125; = data;</span><br><span class=\"line\">  if (status === &apos;error&apos;) &#123;</span><br><span class=\"line\">    throw new Error(message);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return &#123; data &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>然后，这类错误就会走到<code>onError</code>hook 里。</p>\n<h5 id=\"Subscription\">Subscription<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#Subscription\"></a></h5><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">subscriptions</span><br></pre></td></tr></table></div></figure>\n\n<p>是订阅，用于订阅一个数据源，然后根据需要 dispatch 相应的 action。数据源可以是当前的时间、服务器的 websocket 连接、keyboard 输入、geolocation 变化、history 路由变化等等。格式为<code>({ dispatch, history }) =&gt; unsubscribe</code></p>\n<h5 id=\"异步数据初始化\">异步数据初始化<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#异步数据初始化\"></a></h5><p>比如：当用户进入<code>/users</code>页面时，触发 action<code>users/fetch</code>加载用户数据。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.model(&#123;</span><br><span class=\"line\">  subscriptions: &#123;</span><br><span class=\"line\">    setup(&#123; dispatch, history &#125;) &#123;</span><br><span class=\"line\">      history.listen((&#123; pathname &#125;) =&gt; &#123;</span><br><span class=\"line\">        if (pathname === &apos;/users&apos;) &#123;</span><br><span class=\"line\">          dispatch(&#123;</span><br><span class=\"line\">            type: &apos;users/fetch&apos;,</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></div></figure>\n\n<h5 id=\"path-to-regexp-Package\"><code>path-to-regexp</code> Package<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#path-to-regexp-Package\"></a></h5><p>如果 url 规则比较复杂，比如<code>/users/:userId/search</code>，那么匹配和 userId 的获取都会比较麻烦。这是推荐用<a href=\"https://link.jianshu.com/?t=https://github.com/pillarjs/path-to-regexp\" target=\"_blank\" rel=\"noopener\">path-to-regexp</a>简化这部分逻辑。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import pathToRegexp from &apos;path-to-regexp&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">// in subscription</span><br><span class=\"line\">const match = pathToRegexp(&apos;/users/:userId/search&apos;).exec(pathname);</span><br><span class=\"line\">if (match) &#123;</span><br><span class=\"line\">  const userId = match[1];</span><br><span class=\"line\">  // dispatch action with userId</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h5 id=\"Router\">Router<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#Router\"></a></h5><h5 id=\"Config-with-JSX-Element-router-js\">Config with JSX Element (router.js)<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#Config-with-JSX-Element-router-js\"></a></h5><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Route path=&quot;/&quot; component=&#123;App&#125;&gt;</span><br><span class=\"line\">  &lt;Route path=&quot;accounts&quot; component=&#123;Accounts&#125;/&gt;</span><br><span class=\"line\">  &lt;Route path=&quot;statements&quot; component=&#123;Statements&#125;/&gt;</span><br><span class=\"line\">&lt;/Route&gt;</span><br></pre></td></tr></table></div></figure>\n\n<p>详见：<a href=\"https://link.jianshu.com/?t=https://github.com/reactjs/react-router/blob/master/docs/guides/RouteConfiguration.md\" target=\"_blank\" rel=\"noopener\">react-router</a></p>\n<h5 id=\"Route-Components\">Route Components<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#Route-Components\"></a></h5><p>Route Components 是指<code>./src/routes/</code>目录下的文件，他们是<code>./src/router.js</code><br>里匹配的 Component。</p>\n<h5 id=\"通过-connect-绑定数据\">通过 connect 绑定数据<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#通过-connect-绑定数据\"></a></h5><p>比如：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; connect &#125; from &apos;dva&apos;;</span><br><span class=\"line\">function App() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function mapStateToProps(state, ownProps) &#123;</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\">    users: state.users,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default connect(mapStateToProps)(App);</span><br></pre></td></tr></table></div></figure>\n\n<p>然后在 App 里就有了<code>dispatch</code>和<code>users</code>两个属性。</p>\n<p>Injected Props (e.g. location)</p>\n<p>Route Component 会有额外的 props 用以获取路由信息。</p>\n<ul>\n<li>location</li>\n<li>params</li>\n<li>children</li>\n</ul>\n<p>更多详见：<a href=\"https://link.jianshu.com/?t=https://github.com/reactjs/react-router/blob/master/docs/API.md#injected-props\" target=\"_blank\" rel=\"noopener\">react-router</a></p>\n<h5 id=\"基于-action-进行页面跳转\">基于 action 进行页面跳转<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#基于-action-进行页面跳转\"></a></h5><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; routerRedux &#125; from &apos;dva/router&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">// Inside Effects</span><br><span class=\"line\">yield put(routerRedux.push(&apos;/logout&apos;));</span><br><span class=\"line\"></span><br><span class=\"line\">// Outside Effects</span><br><span class=\"line\">dispatch(routerRedux.push(&apos;/logout&apos;));</span><br><span class=\"line\"></span><br><span class=\"line\">// With query</span><br><span class=\"line\">routerRedux.push(&#123;</span><br><span class=\"line\">  pathname: &apos;/logout&apos;,</span><br><span class=\"line\">  query: &#123;</span><br><span class=\"line\">    page: 2,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></div></figure>\n\n<p>除<code>push(location)</code>外还有更多方法，详见<a href=\"https://link.jianshu.com/?t=https://github.com/reactjs/react-router-redux#pushlocation-replacelocation-gonumber-goback-goforward\" target=\"_blank\" rel=\"noopener\">react-router-redux</a></p>\n<h5 id=\"dva-配置\">dva 配置<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#dva-配置\"></a></h5><p>Redux Middleware</p>\n<p>比如要添加 redux-logger 中间件：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import createLogger from &apos;redux-logger&apos;;</span><br><span class=\"line\">const app = dva(&#123;</span><br><span class=\"line\">  onAction: createLogger(),</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></div></figure>\n\n<p>注：onAction 支持数组，可同时传入多个中间件。</p>\n<h5 id=\"history\">history<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#history\"></a></h5><h5 id=\"切换-history-为-browserHistory\">切换 history 为 browserHistory<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#切换-history-为-browserHistory\"></a></h5><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; browserHistory &#125; from &apos;dva/router&apos;;</span><br><span class=\"line\">const app = dva(&#123;</span><br><span class=\"line\">  history: browserHistory,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></div></figure>\n\n<h5 id=\"去除-hashHistory-下的-k-查询参数\">去除 hashHistory 下的 _k 查询参数<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#去除-hashHistory-下的-k-查询参数\"></a></h5><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; useRouterHistory &#125; from &apos;dva/router&apos;;</span><br><span class=\"line\">import &#123; createHashHistory &#125; from &apos;history&apos;;</span><br><span class=\"line\">const app = dva(&#123;</span><br><span class=\"line\">  history: useRouterHistory(createHashHistory)(&#123; queryKey: false &#125;),</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></div></figure>\n\n<h5 id=\"工具\">工具<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#工具\"></a></h5><h5 id=\"通过-dva-cli-创建项目\">通过 dva-cli 创建项目<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#通过-dva-cli-创建项目\"></a></h5><p>先安装 dva-cli 。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install dva-cli -g</span><br></pre></td></tr></table></div></figure>\n\n<p>然后创建项目。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ dva new myapp</span><br></pre></td></tr></table></div></figure>\n\n<p>最后，进入目录并启动。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd myapp</span><br><span class=\"line\">$ npm start</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"4-Umi路由\">4. Umi路由<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#4-Umi路由\"></a></h4><p>Umi根据<code>pages</code>目录自动生成路由配置。</p>\n<h5 id=\"常规路由\">常规路由<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#常规路由\"></a></h5><h5 id=\"基本路由\">基本路由<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#基本路由\"></a></h5><p>假定<code>pages</code>目录结构如下：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ pages/</span><br><span class=\"line\">  + users/</span><br><span class=\"line\">    - index.js</span><br><span class=\"line\">    - list.js</span><br><span class=\"line\">  - index.js</span><br></pre></td></tr></table></div></figure>\n\n<p>然后，umi将自动生成如下的路由配置：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">'/'</span>, <span class=\"attr\">component</span>: <span class=\"string\">'./pages/index.js'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">'/users/'</span>, <span class=\"attr\">component</span>: <span class=\"string\">'./pages/users/index.js'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">'/users/list'</span>, <span class=\"attr\">component</span>: <span class=\"string\">'./pages/users/list.js'</span> &#125;,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></div></figure>\n\n<h5 id=\"动态路由\">动态路由<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#动态路由\"></a></h5><p>按照umi的约定，带有<code>$</code>前缀的目录或文件是动态路由。</p>\n<p>例如，以下目录结构：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ pages/</span><br><span class=\"line\">  + $post/</span><br><span class=\"line\">    - index.js</span><br><span class=\"line\">    - comments.js</span><br><span class=\"line\">  + users/</span><br><span class=\"line\">    $id.js</span><br><span class=\"line\">  - index.js</span><br></pre></td></tr></table></div></figure>\n\n<p>路由配置将生成如下：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">'/'</span>, <span class=\"attr\">component</span>: <span class=\"string\">'./pages/index.js'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">'/users/:id'</span>, <span class=\"attr\">component</span>: <span class=\"string\">'./pages/users/$id.js'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">'/:post/'</span>, <span class=\"attr\">component</span>: <span class=\"string\">'./pages/$post/index.js'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">'/:post/comments'</span>, <span class=\"attr\">component</span>: <span class=\"string\">'./pages/$post/comments.js'</span> &#125;,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></div></figure>\n\n<p>可选的动态路由</p>\n<p>在umi中，如果具有<code>$</code>后缀，则动态路由是可选的动态路由。</p>\n<p>例如，以下结构：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ pages/</span><br><span class=\"line\">  + users/</span><br><span class=\"line\">    - $id$.js</span><br><span class=\"line\">  - index.js</span><br></pre></td></tr></table></div></figure>\n\n<p>路由配置将生成如下：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">'/'</span>: component: <span class=\"string\">'./pages/index.js'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">'/users/:id?'</span>: component: <span class=\"string\">'./pages/users/$id$.js'</span> &#125;,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></div></figure>\n\n<p>嵌套路由</p>\n<p>当<code>_layout.js</code>umi目录中存在时，将生成嵌套路由，并将其<code>_layout.js</code>作为目录的布局。</p>\n<p>例如，以下目录结构：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ pages/</span><br><span class=\"line\">  + users/</span><br><span class=\"line\">    - _layout.js</span><br><span class=\"line\">    - $id.js</span><br><span class=\"line\">    - index.js</span><br></pre></td></tr></table></div></figure>\n\n<p>路由配置将生成如下：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">'/users'</span>, <span class=\"attr\">component</span>: <span class=\"string\">'./pages/users/_layout.js'</span>,</span><br><span class=\"line\">    routes: [</span><br><span class=\"line\">     &#123; <span class=\"attr\">path</span>: <span class=\"string\">'/users/'</span>, <span class=\"attr\">component</span>: <span class=\"string\">'./pages/users/index.js'</span> &#125;,</span><br><span class=\"line\">     &#123; <span class=\"attr\">path</span>: <span class=\"string\">'/users/:id'</span>, <span class=\"attr\">component</span>: <span class=\"string\">'./pages/users/$id.js'</span> &#125;,</span><br><span class=\"line\">   ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></div></figure>\n\n<h5 id=\"全局布局\">全局布局<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#全局布局\"></a></h5><p>约定<code>src/layouts/index.js</code>是一条全局路由，返回一个React组件，并通过渲染子组件<code>props.children</code>。</p>\n<p>例：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;&gt;</span><br><span class=\"line\">      &lt;Header /&gt;</span><br><span class=\"line\">      &#123; props.children &#125;</span><br><span class=\"line\">      &lt;Footer /&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></div></figure>\n\n<p>不同的全局布局</p>\n<p>您可能需要为不同的路线输出不同的全局布局。umi不支持这种配置，但是您仍然可以区分location.path并在中呈现不同的布局<code>layouts/index.js</code>。</p>\n<p>例如，如果您要为/ login输出简单的布局，</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (props.location.pathname === <span class=\"string\">'/login'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &lt;SimpleLayout&gt;&#123; props.children &#125;&lt;/SimpleLayout&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;&gt;</span><br><span class=\"line\">      &lt;Header /&gt;</span><br><span class=\"line\">      &#123; props.children &#125;</span><br><span class=\"line\">      &lt;Footer /&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></div></figure>\n\n<p>404路由</p>\n<p>约定<code>pages/404.js</code>是404页，需要返回React组件。</p>\n<p>例：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;I am a customized <span class=\"number\">404</span> page&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;;</span></span><br></pre></td></tr></table></div></figure>\n\n<blockquote>\n<p>注意：在开发模式下，umi将添加默认的404页面以帮助开发，但是您仍然可以通过精确访问来验证404页面<code>/404</code>。</p>\n</blockquote>\n<p>通过注释扩展路由</p>\n<p>如果压缩的路由文件包含<strong>yaml</strong>格式的配置，则第一条注释用于扩展路由。</p>\n<p>例：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ pages/</span><br><span class=\"line\">  - index.js</span><br></pre></td></tr></table></div></figure>\n\n<p>如果<code>pages/index.js</code>包含：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * title: Index Page</span></span><br><span class=\"line\"><span class=\"comment\"> * Routes:</span></span><br><span class=\"line\"><span class=\"comment\"> *   - ./src/routes/a.js</span></span><br><span class=\"line\"><span class=\"comment\"> *   - ./src/routes/b.js</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></div></figure>\n\n<p>生成路由配置：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">'/'</span>, <span class=\"attr\">component</span>: <span class=\"string\">'./index.js'</span>,</span><br><span class=\"line\">    title: <span class=\"string\">'Index Page'</span>,</span><br><span class=\"line\">    Routes: [ <span class=\"string\">'./src/routes/a.js'</span>, <span class=\"string\">'./src/routes/b.js'</span> ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></div></figure>\n\n<p>配置路由</p>\n<p>如果你喜欢使用配置的路线，你可以配置<code>routes</code>在配置文件中任一<code>.umirc.(ts|js)</code>或<code>config/config.(ts|js)</code>，<strong>此配置项目不会被解析为src/pages目录</strong>。</p>\n<p>例：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  routes: [</span><br><span class=\"line\">    &#123; <span class=\"attr\">path</span>: <span class=\"string\">'/'</span>, <span class=\"attr\">component</span>: <span class=\"string\">'./a'</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">path</span>: <span class=\"string\">'/list'</span>, <span class=\"attr\">component</span>: <span class=\"string\">'./b'</span>, <span class=\"attr\">Routes</span>: [<span class=\"string\">'./routes/PrivateRoute.js'</span>] &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">path</span>: <span class=\"string\">'/users'</span>, <span class=\"attr\">component</span>: <span class=\"string\">'./users/_layout'</span>,</span><br><span class=\"line\">      routes: [</span><br><span class=\"line\">        &#123; <span class=\"attr\">path</span>: <span class=\"string\">'/users/detail'</span>, <span class=\"attr\">component</span>: <span class=\"string\">'./users/detail'</span> &#125;,</span><br><span class=\"line\">        &#123; <span class=\"attr\">path</span>: <span class=\"string\">'/users/:id'</span>, <span class=\"attr\">component</span>: <span class=\"string\">'./users/id'</span> &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></div></figure>\n\n<p>注意：</p>\n<ol>\n<li>组件相对于<code>src/pages</code>目录</li>\n</ol>\n<h5 id=\"权限路由\">权限路由<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#权限路由\"></a></h5><p>umi的许可路由是通过配置路由的<code>Routes</code>属性来实现的。约定由yaml注释添加，并且配置公式可以直接匹配。</p>\n<p>例如，以下配置：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">'/'</span>, <span class=\"attr\">component</span>: <span class=\"string\">'./pages/index.js'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">'/list'</span>, <span class=\"attr\">component</span>: <span class=\"string\">'./pages/list.js'</span>, <span class=\"attr\">Routes</span>: [<span class=\"string\">'./routes/PrivateRoute.js'</span>] &#125;,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></div></figure>\n\n<p>然后将UMI渲染<code>/list</code>用<code>./routes/PrivateRoute.js</code>。</p>\n<p><code>./routes/PrivateRoute.js</code>文件示例：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> (props) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;div&gt;PrivateRoute (routes/PrivateRoute.js)&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &#123; props.children &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h5 id=\"路线过渡效果\">路线过渡效果<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#路线过渡效果\"></a></h5><h5 id=\"有几种方法可以实现路由过渡效果。这是react-transition-group的示例。\">有几种方法可以实现路由过渡效果。这是<a href=\"https://github.com/reactjs/react-transition-group\" target=\"_blank\" rel=\"noopener\">react-transition-group</a>的示例。<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#有几种方法可以实现路由过渡效果。这是react-transition-group的示例。\"></a></h5><p>首先安装依赖项，</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn add react-transition-group</span><br></pre></td></tr></table></div></figure>\n\n<p>在布局成分（<code>layouts/index.js</code>或<code>_layout.js</code>在网页子目录），包的子组件与<code>TransitionGroup</code>和<code>CSSTransition</code>，并使用<code>location.pathname</code>作为键。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> withRouter <span class=\"keyword\">from</span> <span class=\"string\">'umi/withRouter'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; TransitionGroup, CSSTransition &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-transition-group\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> withRouter(</span><br><span class=\"line\">  (&#123; location &#125;) =&gt;</span><br><span class=\"line\">    &lt;TransitionGroup&gt;</span><br><span class=\"line\">      &lt;CSSTransition key=&#123;location.pathname&#125; classNames=<span class=\"string\">\"fade\"</span> timeout=&#123;<span class=\"number\">300</span>&#125;&gt;</span><br><span class=\"line\">        &#123; children &#125;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/CSSTransition&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>TransitionGroup&gt;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></div></figure>\n\n<p><code>fade</code>上面使用的样式可以在<code>global.css</code>下面定义<code>src</code>：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.fade-enter</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">z-index</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.fade-enter</span><span class=\"selector-class\">.fade-enter-active</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: opacity <span class=\"number\">250ms</span> ease-in;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h5 id=\"面包屑\">面包屑<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#面包屑\"></a></h5><p>有很多方法可以实现面包屑。这是<a href=\"https://github.com/icd2k3/react-router-breadcrumbs-hoc\" target=\"_blank\" rel=\"noopener\">react-router-breadcrumbs-hoc</a>的示例。</p>\n<p>首先安装依赖项，</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn add react-router-breadcrumbs-hoc</span><br></pre></td></tr></table></div></figure>\n\n<p>然后实施<code>Breakcrumbs.js</code>，例如：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> NavLink <span class=\"keyword\">from</span> <span class=\"string\">'umi/navlink'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> withBreadcrumbs <span class=\"keyword\">from</span> <span class=\"string\">'react-router-breadcrumbs-hoc'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// More configuration please go to https://github.com/icd2k3/react-router-breadcrumbs-hoc</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> routes = [</span><br><span class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">'/'</span>, <span class=\"attr\">breadcrumb</span>: <span class=\"string\">'home'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">'/list'</span>, <span class=\"attr\">breadcrumb</span>: <span class=\"string\">'List Page'</span> &#125;,</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> withBreadcrumbs(routes)(<span class=\"function\">(<span class=\"params\">&#123; breadcrumbs &#125;</span>) =&gt;</span> (</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &#123;breadcrumbs.map(<span class=\"function\">(<span class=\"params\">breadcrumb, index</span>) =&gt;</span> (</span><br><span class=\"line\">      &lt;span key=&#123;breadcrumb.key&#125;&gt;</span><br><span class=\"line\">        &lt;NavLink to=&#123;breadcrumb.props.match.url&#125;&gt;</span><br><span class=\"line\">          &#123;breadcrumb&#125;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/NavLink&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &#123;(index &lt; breadcrumbs.length - 1) &amp;&amp; &lt;i&gt; /</span> &lt;/i&gt;&#125;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/span&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    ))&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>div&gt;</span><br><span class=\"line\">));</span><br></pre></td></tr></table></div></figure>\n\n<p>然后在需要的地方介绍这个React组件。</p>\n<h5 id=\"启用哈希路由\">启用哈希路由<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#启用哈希路由\"></a></h5><p>Umi默认为浏览器历史记录。如果要使用哈希历史记录，则需要配置：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  history: <span class=\"string\">'hash'</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h5 id=\"滚动到顶部\">滚动到顶部<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#滚动到顶部\"></a></h5><p>确定是否滚动到<code>componentDidUpdate</code>布局组件的顶部（<code>layouts/index.js</code>或<code>_layout.js</code>页面子目录中的），例如：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> withRouter <span class=\"keyword\">from</span> <span class=\"string\">'umi/withRouter'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Layout</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  componentDidUpdate(prevProps) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.props.location !== prevProps.location) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">window</span>.scrollTo(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.props.children;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> withRouter(Layout);</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"5-dva和umi搭配使用\">5. dva和umi搭配使用<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#5-dva和umi搭配使用\"></a></h4><h5 id=\"功能\">功能<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#功能\"></a></h5><ul>\n<li><strong>通过目录加载模型</strong>，摆脱<code>app.model</code></li>\n<li><strong>文件名作为命名空间</strong>，<code>namespace</code>因为模型密钥将由<code>umi</code></li>\n<li><strong>没有手动定义的router.js</strong>，<code>umi</code>将接管路由器的内容，并且<code>model</code>s和<code>component</code>s都可以按需加载</li>\n<li><strong>内置查询字符串处理程序</strong>，不再需要手动编码和解码URL</li>\n<li><strong>内置的dva-loading和dva-immer支持</strong>，<code>dva-immer</code>可以通过配置启用</li>\n<li><strong>开箱即用的</strong>，相关性，如：<code>dva</code>，<code>dva-loading</code>，<code>dva-immer</code>，<code>path-to-regexp</code>，<code>object-assign</code>，<code>react</code>，<code>react-dom</code>是建立在，所以你不必担心他们</li>\n</ul>\n<h5 id=\"用法\">用法<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#用法\"></a></h5><p>通过安装<code>yarn</code>，</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn add umi-plugin-react</span><br></pre></td></tr></table></div></figure>\n\n<p><code>npm</code>使用命令通过安装<code>npm install --save umi-plugin-react</code>。</p>\n<p>在<code>.umirc.js</code>以下位置添加配置：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      <span class=\"string\">'umi-plugin-react'</span>,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        dva: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      &#125;,.</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></div></figure>\n\n<p>启用<code>dva-immer</code>优雅的reducer书写体验</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      <span class=\"string\">'umi-plugin-react'</span>,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        dva: &#123;</span><br><span class=\"line\">          immer: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></div></figure>\n\n<h5 id=\"注册模型\">注册模型<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#注册模型\"></a></h5><p>有两种类型的模型：全局注册（全局）模型和页面级模型。</p>\n<p>全局模型应在中定义<code>/src/models/</code>，并且可以在所有其他页面中引用。</p>\n<p>页面级模型不应在任何其他页面中使用。</p>\n<p>模型加载规则：</p>\n<ul>\n<li><code>src/models/**/*.js</code> 被定义为全局模型</li>\n<li><code>src/pages/**/models/**/*.js</code> 被定义为页面级模型</li>\n<li>全局模型将与应用程序一起加载；在<code>production</code>构建时按需加载页面级模型（两者都将始终在<code>development</code>构建中加载）</li>\n<li>页面级模型可以是模式中的<code>.js</code>文件<code>models/**/*.js</code></li>\n<li>页面级模型可以向上扫描到应用程序结构，例如：如果您有<code>.js</code>like 页面<code>pages/a/b.js</code>，则其页面级模型应为<code>pages/a/b/models/**/*.js</code>+ <code>pages/a/models/**/*.js</code>…</li>\n<li>如果<code>model.js</code>已定义，则页面应为单个文件模型，这意味着<code>models</code>如果只有一个模型，则不必创建目录。因此，如果您已<code>model.js</code>定义，则其中定义的所有<code>.js</code>文件都<code>models/**/*.js</code>将被忽略</li>\n</ul>\n<p>例：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ src</span><br><span class=\"line\">  + models</span><br><span class=\"line\">    - g.js</span><br><span class=\"line\">  + pages</span><br><span class=\"line\">    + a</span><br><span class=\"line\">      + models</span><br><span class=\"line\">        - a.js</span><br><span class=\"line\">        - b.js</span><br><span class=\"line\">        + ss</span><br><span class=\"line\">          - s.js</span><br><span class=\"line\">      - page.js</span><br><span class=\"line\">    + c</span><br><span class=\"line\">      - model.js</span><br><span class=\"line\">      + d</span><br><span class=\"line\">        + models</span><br><span class=\"line\">          - d.js</span><br><span class=\"line\">        - page.js</span><br><span class=\"line\">      - page.js</span><br></pre></td></tr></table></div></figure>\n\n<p>具有以上文件结构：</p>\n<ul>\n<li>全局模型是 <code>src/models/g.js</code></li>\n<li>的页面级模型<code>/a</code>是<code>src/pages/a/models/{a,b,ss/s}.js</code></li>\n<li>的页面级模型<code>/c</code>是<code>src/pages/c/model.js</code></li>\n<li>的页面级模型<code>/c/d</code>是<code>src/pages/c/model.js, src/pages/c/d/models/d.js</code></li>\n</ul>\n<h5 id=\"配置和插件\">配置和插件<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#配置和插件\"></a></h5><blockquote>\n<p>中的先前配置<code>src/dva.js</code>已被弃用，并将在下一个主要版本中删除支持。</p>\n</blockquote>\n<p><code>app.js</code>在<code>src</code>目录中创建一个新内容，其中包含以下内容：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> dva = &#123;</span><br><span class=\"line\">  config: &#123;</span><br><span class=\"line\">    onError(e) &#123;</span><br><span class=\"line\">      e.preventDefault();</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.error(e.message);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">'dva-logger'</span>)(),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></div></figure>\n\n<h5 id=\"常见问题\">常见问题<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#常见问题\"></a></h5><h5 id=\"每当URL更改时，页面组件都不会重新呈现吗？\">每当URL更改时，页面组件都不会重新呈现吗？<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#每当URL更改时，页面组件都不会重新呈现吗？\"></a></h5><p>如果您有<code>connect</code>资料<code>layouts/index.js</code>，<code>umi/withRouter</code>则为必填</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> withRouter <span class=\"keyword\">from</span> <span class=\"string\">'umi/withRouter'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> withRouter(connect(mapStateToProps)(LayoutComponent));</span><br></pre></td></tr></table></div></figure>\n\n<h5 id=\"如何访问store或dispatch？\">如何访问<code>store</code>或<code>dispatch</code>？<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#如何访问store或dispatch？\"></a></h5><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.g_app._store</span><br><span class=\"line\"><span class=\"built_in\">window</span>.g_app._store.dispatch</span><br></pre></td></tr></table></div></figure>\n\n<h5 id=\"如何禁用component和的按需负载models？\">如何禁用<code>component</code>和的按需负载<code>models</code>？<a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#如何禁用component和的按需负载models？\"></a></h5><p>将配置添加到<code>.umirc.js</code>：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      <span class=\"string\">'umi-plugin-react'</span>,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        dva: &#123;</span><br><span class=\"line\">          dynamicImport: <span class=\"literal\">undefined</span> <span class=\"comment\">// config in dva</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        dynamicImport: <span class=\"literal\">undefined</span>   <span class=\"comment\">// root config will be inherited as well</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></div></figure>\n\n<h5 id=\"在输入connect数据时更改URL时，不会重新呈现页面组件layout\">在输入<code>connect</code>数据时更改URL时，不会重新呈现页面组件<code>layout</code><a href=\"2019/10/09/React+Umi+Dva+Antd-技术栈#在输入connect数据时更改URL时，不会重新呈现页面组件layout\"></a></h5><p>查看<code>connect</code>，<code>withRouter</code>使用顺序</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> withRouter <span class=\"keyword\">from</span> <span class=\"string\">'umi/withRouter'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> withRouter(connect()(Layout));</span><br></pre></td></tr></table></div></figure>","next":{"title":"wamp环境搭建","link":"2019/08/09/wamp环境搭建"},"plink":"http://Li_junhui.github.io.git/2019/10/09/React+Umi+Dva+Antd-技术栈/"}