{"title":"Vue中的小技巧","date":"2018-12-10T10:32:38.000Z","link":"2018/12/10/Vue中的小技巧","comments":true,"updated":"2019-08-31T12:07:37.678Z","content":"<h4 id=\"一、js适配经验\">一、js适配经验<a href=\"2018/12/10/Vue中的小技巧#一、js适配经验\"></a></h4><p>写代码的时候，很有可能会写到这种代码：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>].includes(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></div></figure>\n\n<p>或者是使用promise等es6方法，但是我们的需求是在Android4.4上完美运行。这样就会出现includes is not undefined等错误提示。我们可以通过webpack插件来解决，具体方法：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"babel-polyfill\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> es6Promise <span class=\"keyword\">from</span> <span class=\"string\">\"es6-promise\"</span></span><br><span class=\"line\">es6Promise.polyfill()</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'es6-promise'</span>).polyfill()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//webpack配置文件处</span></span><br><span class=\"line\">entry:&#123;</span><br><span class=\"line\">    app:[<span class=\"string\">'babel-polyfill'</span>,<span class=\"string\">'./src/main.js'</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"二、全局定义\">二、全局定义<a href=\"2018/12/10/Vue中的小技巧#二、全局定义\"></a></h4><p>当我们写了很多库的时候，我们引入页面可能会变成这样：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//vue1</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> utils <span class=\"keyword\">from</span> <span class=\"string\">'library'</span></span><br><span class=\"line\"><span class=\"comment\">//vue2</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> utils <span class=\"keyword\">from</span> <span class=\"string\">'libray'</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">//vue n</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> utils <span class=\"keyword\">from</span> <span class=\"string\">'libray'</span></span><br></pre></td></tr></table></div></figure>\n\n<p>可以这样处理</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> http <span class=\"keyword\">from</span> <span class=\"string\">'http/http'</span></span><br><span class=\"line\">Vue.prototype.$okhttp = http</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//use</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$okhttp</span><br></pre></td></tr></table></div></figure>\n\n<p>这样会节省很多没有必要的代码量</p>\n<h4 id=\"三、自定义目录\">三、自定义目录<a href=\"2018/12/10/Vue中的小技巧#三、自定义目录\"></a></h4><p>在写代码时，很多时候存在这种情况：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> component1 <span class=\"keyword\">from</span> <span class=\"string\">\"../../../component\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> component2 <span class=\"keyword\">from</span> <span class=\"string\">\"../../../component\"</span></span><br></pre></td></tr></table></div></figure>\n\n<p>这样写的缺陷是一旦某个目录发生变化的时候就会导致引入错误，可以通过webpack路径解决</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  context: path.resolve(__dirname, <span class=\"string\">'../'</span>),</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    app: [<span class=\"string\">'babel-polyfill'</span>, <span class=\"string\">'./src/main.js'</span>]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;&#125;,</span><br><span class=\"line\">  resolve: &#123;</span><br><span class=\"line\">    extensions: [<span class=\"string\">'.js'</span>, <span class=\"string\">'.vue'</span>, <span class=\"string\">'.json'</span>],</span><br><span class=\"line\">    alias: &#123;</span><br><span class=\"line\">      <span class=\"string\">'vue$'</span>: <span class=\"string\">'vue/dist/vue.esm.js'</span>,</span><br><span class=\"line\">      <span class=\"string\">'@'</span>: resolve(<span class=\"string\">'src'</span>),</span><br><span class=\"line\">      <span class=\"string\">'components'</span>: resolve(<span class=\"string\">'src/components'</span>),</span><br><span class=\"line\">      <span class=\"string\">'pages'</span>: resolve(<span class=\"string\">'src/pages'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">  node: &#123;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>在resolve–&gt;alias里面配置绝对相对路径，在使用的时候</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> component1 <span class=\"keyword\">from</span> <span class=\"string\">\"pages/component\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> component2 <span class=\"keyword\">from</span> <span class=\"string\">\"pages/component\"</span></span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"四、路由懒加载\">四、路由懒加载<a href=\"2018/12/10/Vue中的小技巧#四、路由懒加载\"></a></h4><p>官方文档里面定义路由的时候都有两步 ：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Router <span class=\"keyword\">from</span> <span class=\"string\">'vue-router'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> xxx <span class=\"keyword\">from</span> <span class=\"string\">'xxx'</span></span><br><span class=\"line\">Vue.use(Router)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> Router(&#123;</span><br><span class=\"line\">  routes: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">      component: xxx,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></div></figure>\n\n<p>在做大型项目的时候 很有可能定义很多个路由，那样页面就会写的特别多。此时懒加载就会解决这个问题</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Router <span class=\"keyword\">from</span> <span class=\"string\">'vue-router'</span></span><br><span class=\"line\">Vue.use(Router)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> Router(&#123;</span><br><span class=\"line\">  routes: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">      component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">\"xxx\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"五、样式污染和样式覆盖的问题\">五、样式污染和样式覆盖的问题<a href=\"2018/12/10/Vue中的小技巧#五、样式污染和样式覆盖的问题\"></a></h4><p>在我们新建vue的时候，经常会看到scoped</p>\n <figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/style&gt;</span></span><br></pre></td></tr></table></div></figure>\n\n<p>如果我们去掉scoped的时候会发现，在本vue项目内定义的css属性会影响到其他vue页面的css属性。这个就很坑了，所以我们在使用的时候一定要用scoped</p>\n<p>但在实际的开发中，也会遇到这个问题。比如elementUI</p>\n<p>虽然里面的资源库很强大，但里面的视图不能完全符合策划的需求，此时就要进行微调。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style lang=<span class=\"string\">\"stylus\"</span> scoped&gt;</span><br><span class=\"line\">  .custom-dialog</span><br><span class=\"line\">    .el-dialog__header</span><br><span class=\"line\">      padding <span class=\"number\">0</span></span><br><span class=\"line\">    .el-dialog__body</span><br><span class=\"line\">      padding <span class=\"number\">0</span></span><br><span class=\"line\">&lt;<span class=\"regexp\">/style&gt;</span></span><br></pre></td></tr></table></div></figure>\n\n<p>如果此时我们加上scoped属性的话，我们发现并没有效果，发现去掉scoped才会起作用。</p>\n<h4 id=\"六、mock\">六、mock<a href=\"2018/12/10/Vue中的小技巧#六、mock\"></a></h4><p>很多情况下，后还没有搭建完成之前。可能前端没办法进行数据的接入。这种情况可能是一个大问题，这样会严重拖慢项目的开发，此时就需要mock</p>\n<p>首先在webpack.dev.conf.js里面配置express</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express()</span><br><span class=\"line\"><span class=\"keyword\">const</span> appData = <span class=\"built_in\">require</span>(<span class=\"string\">'../static/data/user.json'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> apiRouter = express.Router()</span><br><span class=\"line\">app.use(<span class=\"string\">'/api'</span>,apiRouter)</span><br></pre></td></tr></table></div></figure>\n\n<p>然后将接口通过devServer发布出去</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> before(app) &#123;</span><br><span class=\"line\">  app.get(<span class=\"string\">'/api/user'</span>,(req, res) =&gt; &#123;</span><br><span class=\"line\">    res.json(&#123;</span><br><span class=\"line\">      data: appData</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>使用的时候就直接打开访问就可以了。</p>\n<h4 id=\"六、代理解决跨越\">六、代理解决跨越<a href=\"2018/12/10/Vue中的小技巧#六、代理解决跨越\"></a></h4><p>有些时候，在进行本地开发的时候，可能会遇到跨域的问题，为了解决这个问题呢 ？主要有两种办法：</p>\n<p>1、服务器设置</p>\n<p>服务端设置很简单，就是将本地开发的东西加上”Access-Control-Allow-Origin“，”*“，或者是直接将本地开发的api直接设置成白名单，这样就可以了。</p>\n<p>2、本地代理</p>\n<p>首先引入</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install http-proxy-middleware --save</span><br></pre></td></tr></table></div></figure>\n\n<p>然后在index.js的标签下proxyTable使用</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'/lesson'</span>: &#123;</span><br><span class=\"line\">        target: <span class=\"string\">'http://xxx/v2/webapi/lesson'</span>, <span class=\"comment\">// 代理的网址</span></span><br><span class=\"line\">        changeOrigin: <span class=\"literal\">true</span>, <span class=\"comment\">// 允许跨域</span></span><br><span class=\"line\">        pathRewrite: &#123;</span><br><span class=\"line\">         <span class=\"string\">'^/lesson'</span>: <span class=\"string\">'/'</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>使用的时候，就直接用</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios(&#123;</span><br><span class=\"line\">       method: <span class=\"string\">'get'</span>,</span><br><span class=\"line\">       url:<span class=\"string\">'/lesson'</span> ,</span><br><span class=\"line\">       params: qs.stringify(data)</span><br><span class=\"line\">     &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (res) &#123;</span><br><span class=\"line\">         <span class=\"comment\">//...</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125;);</span><br><span class=\"line\">   &#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.error(error);</span><br><span class=\"line\">   &#125;)</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"七、页面的统一判断\">七、页面的统一判断<a href=\"2018/12/10/Vue中的小技巧#七、页面的统一判断\"></a></h4><p>在开发中经常会遇到权限判断的问题，我们又不可能在下一个生命周期中去判断一下，可以这样处理：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.beforeEach(<span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  myAccess.checkhaveAccess(to.path) === <span class=\"literal\">true</span> ? next() : next(<span class=\"string\">'/forbid'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"八、事件传递\">八、事件传递<a href=\"2018/12/10/Vue中的小技巧#八、事件传递\"></a></h4><p>一般来说事件的传递很多种，比如父子之间的传递数据就可以直接用props和emit来关联。</p>\n<p>父组件给子组件传递</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 父组件</span></span><br><span class=\"line\">&lt;parent&gt;</span><br><span class=\"line\">    &lt;child :datas=<span class=\"string\">\"content\"</span>&gt;&lt;/child&gt; </span><br><span class=\"line\">&lt;<span class=\"regexp\">/parent&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">data()&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    return &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        content:'sichaoyun'</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ 子组件</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">props:[\"datas\"];</span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ 或者是 </span></span><br><span class=\"line\"><span class=\"regexp\">props: &#123;</span></span><br><span class=\"line\"><span class=\"regexp\"> datas: String</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></div></figure>\n\n<p>子组件给父组件传递</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 子组件</span></span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div @click=<span class=\"string\">\"open\"</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/template&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">methods: &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">   open() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        this.$emit('showbox','the msg'); /</span><span class=\"regexp\">/触发showbox方法，'the msg'为向父组件传递的数据</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ 父组件</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;child @showbox=\"toshow\" :msg=\"msg\"&gt;&lt;/</span>child&gt; <span class=\"comment\">//监听子组件触发的showbox事件,然后调用toshow方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">    toshow(msg) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.msg = msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>兄弟组件之间传递一般有几种方式：</p>\n<p>1、注册全局事件</p>\n<p>2、vuex</p>\n<p>3、localstroage</p>\n<p>使用全局事件则代码如下：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(); <span class=\"comment\">//创建实例</span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div @click=<span class=\"string\">\"ge\"</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">    ge() &#123;</span><br><span class=\"line\">        vm.$emit(<span class=\"string\">'click'</span>,data); <span class=\"comment\">//触发事件</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div&gt;&lt;/div&gt;</span><br><span class=\"line\">created() &#123;</span><br><span class=\"line\">  vm.$on(<span class=\"string\">'click'</span>, (arg) =&gt; &#123; </span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"九、列表渲染\">九、列表渲染<a href=\"2018/12/10/Vue中的小技巧#九、列表渲染\"></a></h4><h5 id=\"v-for循环绑定model：\">v-for循环绑定model：<a href=\"2018/12/10/Vue中的小技巧#v-for循环绑定model：\"></a></h5><p>这个是我在微信公众号上面看到的写法，很新颖:</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数据    </span></span><br><span class=\"line\">     data() &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">          obj: &#123;</span><br><span class=\"line\">             ob: <span class=\"string\">\"OB\"</span>,</span><br><span class=\"line\">             koro1: <span class=\"string\">\"Koro1\"</span></span><br><span class=\"line\">           &#125;,</span><br><span class=\"line\">           model: &#123;</span><br><span class=\"line\">             ob: <span class=\"string\">\"默认ob\"</span>,</span><br><span class=\"line\">             koro1: <span class=\"string\">\"默认koro1\"</span></span><br><span class=\"line\">           &#125;   </span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">   <span class=\"comment\">// html模板</span></span><br><span class=\"line\">   &lt;div v-<span class=\"keyword\">for</span>=<span class=\"string\">\"(value,key) in obj\"</span>&gt;</span><br><span class=\"line\">      &lt;input type=<span class=\"string\">\"text\"</span> v-model=<span class=\"string\">\"model[key]\"</span>&gt;</span><br><span class=\"line\">   &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">     /</span><span class=\"regexp\">/ input就跟数据绑定在一起了，那两个默认数据也会在input中显示</span></span><br></pre></td></tr></table></div></figure>\n\n<h5 id=\"v-if和v-for尽量不要在同一节点使用：\">v-if和v-for尽量不要在同一节点使用：<a href=\"2018/12/10/Vue中的小技巧#v-if和v-for尽量不要在同一节点使用：\"></a></h5><p>v-for的优先级比v-if高，如果他们处于同一个节点的话，那么每一个循环都会执行一遍v-if。</p>\n<p>如果想根据循环中的每一项的数据来判断是否渲染，那么可以这么做：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;li v-<span class=\"keyword\">for</span>=<span class=\"string\">\"index in datas\"</span> v-<span class=\"keyword\">if</span>=<span class=\"string\">\"Object.is(index,0)\"</span>&gt;</span><br><span class=\"line\">  &#123;&#123; index &#125;&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/li&gt;</span></span><br></pre></td></tr></table></div></figure>\n\n<p>如果你想要根据某些条件跳过循环，而又跟将要渲染的每一项数据没有关系的话，可以将v-if放在v-for的父节点：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 根据elseData是否为true 来判断是否渲染，跟每个元素没有关系    </span></span><br><span class=\"line\">    &lt;ul v-<span class=\"keyword\">if</span>=<span class=\"string\">\"condition\"</span>&gt;</span><br><span class=\"line\">     &lt;li v-<span class=\"keyword\">for</span>=<span class=\"string\">\"index in datas\"</span>&gt;</span><br><span class=\"line\">       &#123;&#123; index &#125;&#125;</span><br><span class=\"line\">     &lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">   &lt;/u</span>l&gt;</span><br><span class=\"line\">   <span class=\"comment\">// 数组是否有数据 跟每个元素没有关系</span></span><br><span class=\"line\">   &lt;ul v-<span class=\"keyword\">if</span>=<span class=\"string\">\"datas.length\"</span>&gt;</span><br><span class=\"line\">     &lt;li v-<span class=\"keyword\">for</span>=<span class=\"string\">\"index in datas\"</span>&gt;</span><br><span class=\"line\">       &#123;&#123; index &#125;&#125;</span><br><span class=\"line\">     &lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">   &lt;/u</span>l&gt;</span><br><span class=\"line\">   &lt;p v-<span class=\"keyword\">else</span>&gt;没有更多数据&lt;<span class=\"regexp\">/p&gt;</span></span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"十、深度watch与watch立即触发回调\">十、深度watch与watch立即触发回调<a href=\"2018/12/10/Vue中的小技巧#十、深度watch与watch立即触发回调\"></a></h4><p>watch有两个可选参数</p>\n<p>选项：deep</p>\n<p>在选项参数中指定deep：true，可以监听对象中属性的变化。</p>\n<p>选项：immediate</p>\n<p>在选项参数中指定immediate：true，将立即以表达式的当前值触发回调，也就是默认触发一次。</p>\n<h4 id=\"十一、路由的项目启动页和404页面\">十一、路由的项目启动页和404页面<a href=\"2018/12/10/Vue中的小技巧#十一、路由的项目启动页和404页面\"></a></h4><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Router(&#123;</span><br><span class=\"line\">    routes: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        path: <span class=\"string\">'/'</span>, <span class=\"comment\">// 项目启动页</span></span><br><span class=\"line\">        redirect:<span class=\"string\">'/login'</span>  <span class=\"comment\">// 重定向到下方声明的路由 </span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        path: <span class=\"string\">'*'</span>, <span class=\"comment\">// 404 页面 </span></span><br><span class=\"line\">        component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'./notfind'</span>)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></div></figure>\n\n<p>比如你的域名为：<a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"noopener\">www.baidu.com</a></p>\n<p>项目启动页指的是:当你进入<a href=\"http://www.baidu.com，会自动挑战到login登录页。\" target=\"_blank\" rel=\"noopener\">www.baidu.com，会自动挑战到login登录页。</a></p>\n<p>404页面指的是:当进入一个没有声明或没有匹配的路由页面时就会跳转到404页面。</p>\n<p>比如进入<a href=\"http://www.baidu.com/testRouter，就会自动跳转到notfind页面。\" target=\"_blank\" rel=\"noopener\">www.baidu.com/testRouter，就会自动跳转到notfind页面。</a></p>\n<p>当你没有声明一个404页面，进入<a href=\"http://www.baidu.com/testRouter,显示的页面是一片空白。\" target=\"_blank\" rel=\"noopener\">www.baidu.com/testRouter,显示的页面是一片空白。</a></p>\n","prev":{"title":"前端性能的优化","link":"2019/01/03/前端性能的优化"},"next":{"title":"Vue的性能优化","link":"2018/11/21/Vue的性能优化"},"plink":"http://Li_junhui.github.io.git/2018/12/10/Vue中的小技巧/"}