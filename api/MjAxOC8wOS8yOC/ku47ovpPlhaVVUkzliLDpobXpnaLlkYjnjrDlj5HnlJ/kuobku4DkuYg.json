{"title":"从输入URL到页面呈现发生了什么","date":"2018-09-28T08:36:36.000Z","link":"2018/09/28/从输入URL到页面呈现发生了什么","comments":true,"updated":"2019-08-31T10:25:28.008Z","content":"<h4 id=\"从用户输入URL开始，到页面呈现在眼前，这其中发生了什么？\">从用户输入URL开始，到页面呈现在眼前，这其中发生了什么？<a href=\"2018/09/28/从输入URL到页面呈现发生了什么#从用户输入URL开始，到页面呈现在眼前，这其中发生了什么？\"></a></h4><p>总体来说分为以下几个过程：</p>\n<p>1、DNS解析</p>\n<p>2、TCP连接</p>\n<p>3、发送方HTTP请求</p>\n<p>4、服务器处理请求并返回HTTP报文</p>\n<p>5、浏览器解析渲染页面</p>\n<p>6、连接结束</p>\n<h4 id=\"具体过程\">具体过程<a href=\"2018/09/28/从输入URL到页面呈现发生了什么#具体过程\"></a></h4><h5 id=\"DNS解析\">DNS解析<a href=\"2018/09/28/从输入URL到页面呈现发生了什么#DNS解析\"></a></h5><p>DNS解析的过程就是寻找哪台机器上有你需要资源的过程。当你在浏览器中输入一个地址时，例如</p>\n<p><a href=\"http://www.baidu.com，其实不是百度网址真正上的地址，互联网上每台计算机的唯一标识就是它的IP地址，但是IP地址并不方便记忆。用户更方便记忆的网址去寻找互联网上的其他计算机，也就是上面提到的百度的网址。所以互联网设计者需要在用户的方便性与可用性方面做一个权衡，这个权衡就是一个网址到IP地址的转换，这个过程就是DNS解析。它实际上充当了一个翻译的角色，实现了网址到IP地址的转换。网址到IP地址的转换过程是如何进行的？\" target=\"_blank\" rel=\"noopener\">www.baidu.com，其实不是百度网址真正上的地址，互联网上每台计算机的唯一标识就是它的IP地址，但是IP地址并不方便记忆。用户更方便记忆的网址去寻找互联网上的其他计算机，也就是上面提到的百度的网址。所以互联网设计者需要在用户的方便性与可用性方面做一个权衡，这个权衡就是一个网址到IP地址的转换，这个过程就是DNS解析。它实际上充当了一个翻译的角色，实现了网址到IP地址的转换。网址到IP地址的转换过程是如何进行的？</a></p>\n<h5 id=\"解析过程\">解析过程<a href=\"2018/09/28/从输入URL到页面呈现发生了什么#解析过程\"></a></h5><p>DNS解析是一个递归查询的过程。</p>\n<p><a href=\"http://www.google.com的IP地址过程。首先先在本地域名服务器中查找IP地址，如果没有找到的情况下，本地域名服务器会向根域名服务器发送一个请求，如果根域名服务器也不存在时，本地域名会向com顶级域名服务器发送一个请求，依次类推下去。直到最后本地域名服务器得到goole的IP地址并把它缓存到本地，供下次查询使用。从上述过程中，可以看出网址的解析是一个从右往左的过程：com---&gt;\" target=\"_blank\" rel=\"noopener\">www.google.com的IP地址过程。首先先在本地域名服务器中查找IP地址，如果没有找到的情况下，本地域名服务器会向根域名服务器发送一个请求，如果根域名服务器也不存在时，本地域名会向com顶级域名服务器发送一个请求，依次类推下去。直到最后本地域名服务器得到goole的IP地址并把它缓存到本地，供下次查询使用。从上述过程中，可以看出网址的解析是一个从右往左的过程：com---&gt;</a> goole.com —&gt;<a href=\"http://www.goole.com。但是你是否发现少了点什么，根域名服务器的解析过程呢？事实上，真正的网址是www.google.com.,并不是我们多打了个点，这个点对应的就是根域名服务器，默认情况下所有的网址的最后一位都是点，既然是默认情况下，为了方便用户，通常会省略，浏览器在请求DNS的时候会自动加上，所有网址真正的解析过程为：\" target=\"_blank\" rel=\"noopener\">www.goole.com。但是你是否发现少了点什么，根域名服务器的解析过程呢？事实上，真正的网址是www.google.com.,并不是我们多打了个点，这个点对应的就是根域名服务器，默认情况下所有的网址的最后一位都是点，既然是默认情况下，为了方便用户，通常会省略，浏览器在请求DNS的时候会自动加上，所有网址真正的解析过程为：</a>. —-&gt;.com—-&gt;google.com.—&gt;<a href=\"http://www.google.com.。\" target=\"_blank\" rel=\"noopener\">www.google.com.。</a></p>\n<h5 id=\"DNS优化\">DNS优化<a href=\"2018/09/28/从输入URL到页面呈现发生了什么#DNS优化\"></a></h5><p>了解了DNS的过程，可以为我们带来哪些？上文中请求道google的地址时，经历了8个步骤，这个过程中存在多个请求（同时存在UDP和TCP请求，为什么有两种请求，请自行查找）。如果每次都经过这么多步骤，是否太耗时间？如何减少该过程的步骤呢？那就是DNS缓存。</p>\n<h5 id=\"DNS缓存\">DNS缓存<a href=\"2018/09/28/从输入URL到页面呈现发生了什么#DNS缓存\"></a></h5><p>DNS存在着多级缓存，从离浏览器的距离排序的话，有以下几种：浏览器缓存，系统缓存，路由缓存，IPS缓存，根域名服务器缓存，顶级域名服务器缓存，主域名服务器缓存。</p>\n<ul>\n<li>在你的chrome浏览器中输入：chrome://dns/，你可以看到chrome浏览器的DNS缓存。</li>\n<li>系统缓存主要在/etc/hosts(Linux系统）中</li>\n</ul>\n<h5 id=\"DNS负载均衡\">DNS负载均衡<a href=\"2018/09/28/从输入URL到页面呈现发生了什么#DNS负载均衡\"></a></h5><p>不知道大家有没有思考过一个问题：DNS返回的IP地址是否每次都一样？如果每次都一样是否说明你请求的资源都位于同一台机器上面，那么这台机器需要多高的性能和存储才能满足亿万级请求呢？其实真实的互联网背后存在成千上百台服务器，大型的网站甚至更多。但是在用户的眼中，它需要的只是处理它的请求，哪台机器处理请求并不重要。DNS可以返回一个合适的机器的IP给用户，例如可以根据每台机器的负载量，该机器离用户地理位置的距离等等，这种过程就是DNS负载均衡，又叫做DNS重定向。大家耳熟能详的CDN就是利用DNS的重定向技术，DNS服务器会返回一个跟用户最接近的点的IP地址给用户，CDN的节点的服务器负责响应用户的请求，提供所需的内容。在这里免费打个免费的广告，我平时使用的比较多的是七牛云的CDN存储图片，作为我个人博客的图床使用。</p>\n<h5 id=\"TCP连接\">TCP连接<a href=\"2018/09/28/从输入URL到页面呈现发生了什么#TCP连接\"></a></h5><p>HTTP协议是使用TCP作为其传输层协议的，当TCP出现瓶颈时，HTTP也会受到影响。但由于TCP优化这一块我平常接触的并不多，所以这一部分我也就不在分析了。</p>\n<h5 id=\"HTTPS协议\">HTTPS协议<a href=\"2018/09/28/从输入URL到页面呈现发生了什么#HTTPS协议\"></a></h5><p>HTTPS在传输数据之前需要客户端与服务器进行一个握手，在握手过程中将确立双方加密数据的密码信息。TLS/SSL使用了非对称加密，对加密以及hash等。具体过程请参考经典阮一峰先生的博客TLS/SSL握手过程。HTTPS相比HTTP，虽然提供了安全的保证，但是势必会带来时间上的损耗，比如握手加密等过程，是否使用HTPPS需要根据具体情况在安全和性能方面做权衡。</p>\n<h5 id=\"HTTP请求\">HTTP请求<a href=\"2018/09/28/从输入URL到页面呈现发生了什么#HTTP请求\"></a></h5><p>其实这部分又可以称为前端工程师眼中的HTTP，它主要发生在客户端。发送HTTP请求的过程就是构建TTP请求报文并通过TCP协议中发送到服务器指定端口（HTTP协议80、8080，HTTPS协议443）。HTTP请求报文由三部分组成：请求行，请求报头和请求正文。</p>\n<h5 id=\"请求行\">请求行<a href=\"2018/09/28/从输入URL到页面呈现发生了什么#请求行\"></a></h5><p>格式：Method Request-Url HTTP-VersionCRLF</p>\n<p><code>eg: GET index.html  HTTP/1.1</code></p>\n<p>常用的方法有：GET，POST，PUT，DELETE，OPTIONS，HEAD。</p>\n<p>请求报头</p>\n<p>请求报头允许客户端向服务器传递请求的附加信息和客户端自身的信息。PS：客户端不一定特指浏览器，有时候也可以使用LInux下的CURL命令以及HTTP客户端测试工具等。常见的请求报头有：Accept，Accept-Charset，Accpect-Language，Content-TYpe，Authorization，Cookie，User-Agent等。</p>\n<p><img src=\"/2018/09/28/从输入URL到页面呈现发生了什么/1.png\" alt class=\"article-img\"></p>\n<p>请求正文</p>\n<p>当使用POST、PUT等方法时，通常需要客户端向服务器传递数据。这些数据就存储在请求正文中。在请求包头中有一些与请求正文相关的信息，例如：现在的Web应用通常采用REST架构，请求的数据格式一般为json。这时就需要设置Content-Type：application/json。</p>\n","prev":{"title":"js中的this指向问题","link":"2018/10/12/js中的this指向问题"},"next":{"title":"关于JavaScript的若干知识点","link":"2018/09/06/关于JavaScript的若干知识点"},"plink":"http://Li_junhui.github.io.git/2018/09/28/从输入URL到页面呈现发生了什么/"}